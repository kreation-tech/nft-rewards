{
  "address": "0xbeFE88f41D25D130388AE35CDa78d77E9fc93c23",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EditionSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SharesPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "airdrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "allowPublic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "allowanceOf",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowancesRef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contentHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contentUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contentUrl",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "metadataUrl",
              "type": "string"
            }
          ],
          "internalType": "struct MintableRewards.Info",
          "name": "_info",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "_size",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_royalties",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "holder",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct MintableRewards.Shares[]",
          "name": "_shares",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_allowancesRef",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "mintAndTransfer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royalties",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wei",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allowancesRef",
          "type": "address"
        }
      ],
      "name": "updateAllowancesRef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contentUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadataUrl",
          "type": "string"
        }
      ],
      "name": "updateEditionsURLs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf96567bb800f035ea328d38aed4173460c7d4ada19fd7ed1f34f1999ee83103",
  "receipt": {
    "to": null,
    "from": "0xDEE48aB42ceEb910c8C61a8966A57Dcf3E8B6706",
    "contractAddress": "0xbeFE88f41D25D130388AE35CDa78d77E9fc93c23",
    "transactionIndex": 30,
    "gasUsed": "4542696",
    "logsBloom": "0x
    "blockHash": "0xb17f6987289af2f46e8fc18a00a7b42ddd46e8be2ced33ad09aa8048527d8f10",
    "transactionHash": "0xbf96567bb800f035ea328d38aed4173460c7d4ada19fd7ed1f34f1999ee83103",
    "logs": [],
    "blockNumber": 10088642,
    "cumulativeGasUsed": "10253482",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4919ddb1008213e29fb966fc2f5423ed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditionSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SharesPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"allowPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"allowanceOf\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowancesRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadataUrl\",\"type\":\"string\"}],\"internalType\":\"struct MintableRewards.Info\",\"name\":\"_info\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"_size\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_royalties\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct MintableRewards.Shares[]\",\"name\":\"_shares\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_allowancesRef\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"mintAndTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allowancesRef\",\"type\":\"address\"}],\"name\":\"updateAllowancesRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contentUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadataUrl\",\"type\":\"string\"}],\"name\":\"updateEditionsURLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"token edition identifier to burn\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getURI()\":{\"returns\":{\"_0\":\"metadataUrl, contentHash\"}},\"initialize(address,(string,string,string,bytes32,string),uint64,uint256,uint16,(address,uint16)[],address)\":{\"params\":{\"_allowancesRef\":\"contract address storing array of tuples listing the allowed minters and their allowances\",\"_info\":\"token properties\",\"_owner\":\"can authorize, mint, gets royalties and a dividend of sales, can update the content URL.\",\"_price\":\"sale price in wei\",\"_royalties\":\"perpetual royalties paid to the creator upon token selling\",\"_shares\":\"array of tuples listing the shareholders and their respective shares in bps (one per each shareholder)\",\"_size\":\"number of NFTs that can be minted from this contract: set to 0 for unbound\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintAndTransfer(address[])\":{\"params\":{\"recipients\":\"list of addresses to send the newly minted tokens to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_value\":\"the sale price for this token\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setPrice(uint256)\":{\"params\":{\"_wei\":\"if sale price is 0, no sale is allowed, otherwise the provided amount of WEI is needed to start the sale.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"User burn function for token id. \"},\"getURI()\":{\"notice\":\"Get URI and hash for edition NFT\"},\"initialize(address,(string,string,string,bytes32,string),uint64,uint256,uint16,(address,uint16)[],address)\":{\"notice\":\"Creates a new edition and sets the only allowed minter to the address that creates/owns the edition: this can be re-assigned or updated later. \"},\"mint()\":{\"notice\":\"If caller is listed as an allowed minter, mints one NFT for him.\"},\"mintAndTransfer(address[])\":{\"notice\":\"Mints multiple tokens, one for each of the given list of addresses. Only the edition owner can use this operation and it is intended fo partial giveaways. \"},\"mintable()\":{\"notice\":\"Returns the number of tokens still available for minting (uint64 when open edition)\"},\"owner()\":{\"notice\":\"Returns the owner of the collection of rewards.\"},\"purchase()\":{\"notice\":\"Basic ETH-based sales operation, performed at the given set price. This operation is open to everyone as soon as the salePrice is set to a non-zero value.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"ERC2981 - Gets royalty information for token\"},\"setPrice(uint256)\":{\"notice\":\"This operation sets the sale price, thus allowing anyone to acquire a token from this edition at the sale price via the purchase operation. Setting the sale price to 0 prevents purchase of the tokens which is then allowed only to permitted addresses. \"},\"shake()\":{\"notice\":\"Transfers all ETHs from the contract balance to the owner and shareholders.\"},\"tokenURI(uint256)\":{\"notice\":\"Get URI for given token id \"},\"totalSupply()\":{\"notice\":\"Returns the number of tokens minted so far \"},\"updateAllowancesRef(address)\":{\"notice\":\"Allows owner to update the allowances reference contract use for this rewards.\"},\"updateEditionsURLs(string,string)\":{\"notice\":\"Allows for updates of content and metadata urls by the owner. Only URLs can be updated (data-uri are supported), hash cannot be updated.\"},\"withdraw()\":{\"notice\":\"Transfers `withdrawable(msg.sender)` to the caller.\"},\"withdrawable(address)\":{\"notice\":\"Returns how much the account can withdraw from this contract.\"}},\"notice\":\"This contract allows dynamic NFT minting.  Operations allow for selling publicly, partial or total giveaways, direct giveaways and rewardings.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintableRewards.sol\":\"MintableRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdfe5444167c3b8cb94bb80044f56148151466d62a86b950c4b57c1ab8bdced7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb1503d6ad7d4251970bfc4fa2d7e6fa2c7716010a0b3d642bdc078cdbef5ecc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xd8a3c09ad479d297be526fe6945ca29a018178ba04c2f35081a8dda7faedc7c8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xc88de28441ae0fbf215384ecbc12b675f862dcdf851daa5a6943cef4c91e4373\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb0fba7a209e01ef5a75bd082cd31b46b417f8572ca87a08475aa60afa01b4801\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc28ec209735cd77cebec87be0ec4586d4cba9002011adf4346e374e60c367756\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x611d1f2720036646366a613a7b6bb85d1527ed3b4fb5ba2db8cfc34f80a37be6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x49915fbc84c030ba425312356c1a0a28f81cdee5ab637f7a264752b52243fec6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8116b65b11e0a65ad6cf40cf2d71d2dacad80ddc37ad42af965fc919afb19e5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5f8d2e5137f7603eeaa0516e5b40dc6e637f179edea8134f1dbef9754c9baf2b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe0091487bb0da2016b050e276b74e83a3a4fa641f65600558281a3dc3ef24994\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x704add6904e5156bac4fb870ee851af4c2d004ae0cac22fd030162843fd1d611\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd74cdb9a9b704bfd99b4c677f49a170f1b16235f59b4ede98db93ff92f702a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"contracts/AllowancesStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584 \\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580  \\u2592\\u2588\\u2580\\u2584\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588 \\u2591\\u2592\\u2588\\u2592\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2584\\u2591\\u2588\\u2580\\u2584\\u2591\\u2584\\u2580\\u2580\\r\\n * \\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580 \\u2592\\u2588\\u2592\\u2592\\u2591\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2584\\u2584\\u2591\\u2580\\u2584\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2588\\u2591\\u2588\\u2580\\u2584\\u2592\\u2588\\u2584\\u2580\\u2592\\u2584\\u2588\\u2588\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n\\r\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * Holds receivers addresses and allowances\\r\\n */\\r\\ncontract AllowancesStore is AccessControlUpgradeable, UUPSUpgradeable {\\r\\n    struct Allowance {\\r\\n        address minter;\\r\\n        uint16 amount;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint16) public allowances;\\r\\n    address[] public minters;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer { }\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\r\\n    \\r\\n    function update(Allowance[] memory _allowances) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        for (uint i = 0; i < _allowances.length; i++) {\\r\\n            if (_allowances[i].amount != 0 && allowances[_allowances[i].minter] == 0) {\\r\\n                minters.push(_allowances[i].minter);\\r\\n            }\\r\\n            allowances[_allowances[i].minter] = _allowances[i].amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateTo(address[] memory _receivers, uint16 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        for (uint i = 0; i < _receivers.length; i++) {\\r\\n            if (amount != 0 && allowances[_receivers[i]] == 0) {\\r\\n                minters.push(_receivers[i]);\\r\\n            }\\r\\n            allowances[_receivers[i]] = amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function totalAllowed() public view returns (uint64) {\\r\\n        uint64 _allowed = 0;\\r\\n        for (uint i = 0; i < minters.length; i++) {\\r\\n            _allowed += allowances[minters[i]];\\r\\n        }\\r\\n        return _allowed;\\r\\n    }\\r\\n\\r\\n    function length() public view returns (uint256) {\\r\\n        return minters.length;\\r\\n    }\\r\\n\\r\\n    function list() public view returns (Allowance[] memory) {\\r\\n        Allowance[] memory _allowances = new Allowance[](minters.length);\\r\\n        for (uint i = 0; i < minters.length; i++) {\\r\\n            _allowances[i] = Allowance(minters[i], allowances[minters[i]]);\\r\\n        }\\r\\n        return _allowances;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x183639b9868b7330fd75f110d187bf8917e2ab74aa78feb15015c0b31323479c\",\"license\":\"MIT\"},\"contracts/IMintableEditions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584 \\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580  \\u2592\\u2588\\u2580\\u2584\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588 \\u2591\\u2592\\u2588\\u2592\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2584\\u2591\\u2588\\u2580\\u2584\\u2591\\u2584\\u2580\\u2580\\r\\n * \\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580 \\u2592\\u2588\\u2592\\u2592\\u2591\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2584\\u2584\\u2591\\u2580\\u2584\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2588\\u2591\\u2588\\u2580\\u2584\\u2592\\u2588\\u2584\\u2580\\u2592\\u2584\\u2588\\u2588\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ninterface IMintableEditions {\\r\\n    /**\\r\\n     * Mints one token for the msg.sender. \\r\\n     */\\r\\n    function mint() external returns (uint256);\\r\\n    \\r\\n    /**\\r\\n     * Mints multiple tokens, one for each of the given addresses.\\r\\n     * \\r\\n     * @param to list of addresses to send the newly minted tokens to\\r\\n     */\\r\\n    function mintAndTransfer(address[] memory to) external returns (uint256);\\r\\n\\r\\n    /** \\r\\n     * Returns the number of tokens still available for minting\\r\\n     */\\r\\n    function mintable() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * Returns the owner of the editions contract.\\r\\n     */\\r\\n    function owner() external view returns (address);\\r\\n}\",\"keccak256\":\"0x2175a4897b3dad3c6080b91f8005c6884475306c1f9828c510a79474e0d81a5f\",\"license\":\"MIT\"},\"contracts/MintableRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584 \\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580  \\u2592\\u2588\\u2580\\u2584\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588 \\u2591\\u2592\\u2588\\u2592\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2584\\u2591\\u2588\\u2580\\u2584\\u2591\\u2584\\u2580\\u2580\\r\\n * \\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580 \\u2592\\u2588\\u2592\\u2592\\u2591\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2584\\u2584\\u2591\\u2580\\u2584\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2588\\u2591\\u2588\\u2580\\u2584\\u2592\\u2588\\u2584\\u2580\\u2592\\u2584\\u2588\\u2588\\r\\n *\\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\r\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\r\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./IMintableEditions.sol\\\";\\r\\nimport \\\"./AllowancesStore.sol\\\";\\r\\n\\r\\n/**\\r\\n * This contract allows dynamic NFT minting.\\r\\n * \\r\\n * Operations allow for selling publicly, partial or total giveaways, direct giveaways and rewardings.\\r\\n */\\r\\ncontract MintableRewards is ERC721Upgradeable, IERC2981Upgradeable, IMintableEditions, OwnableUpgradeable {\\r\\n    \\r\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\r\\n    \\r\\n    event PriceChanged(uint256 amount);\\r\\n    event EditionSold(uint256 price, address owner);\\r\\n    event SharesPaid(address to, uint256 amount);\\r\\n\\r\\n    struct Shares {\\r\\n        address payable holder;\\r\\n        uint16 bps;\\r\\n    }\\r\\n\\r\\n    struct Allowance {\\r\\n        address minter;\\r\\n        uint16 amount;\\r\\n    }\\r\\n\\r\\n    struct Info {\\r\\n        // name of rewards\\r\\n        string name;\\r\\n        // symbol of the tokens minted by this contract\\r\\n        string symbol;\\r\\n        // content URL of the token editions\\r\\n        string contentUrl;\\r\\n        // SHA256 of the token rewards content in bytes32 format (0xHASH)\\r\\n        bytes32 contentHash;\\r\\n        // token rewards metadata URL\\r\\n        string metadataUrl;\\r\\n    }\\r\\n\\r\\n    // token id counter\\r\\n    CountersUpgradeable.Counter private counter;\\r\\n\\r\\n    // token content URL\\r\\n    string public contentUrl;\\r\\n    // hash for the associated content\\r\\n    bytes32 public contentHash;\\r\\n    // token metadata URL\\r\\n    string public metadataUrl;\\r\\n    \\r\\n    // the number of editions this contract can mint\\r\\n    uint64 public size; // 8\\r\\n    \\r\\n    // royalties ERC2981 in bps\\r\\n    uint16 public royalties; // 2\\r\\n\\r\\n    address public allowancesRef; // 20\\r\\n\\r\\n    // addresses allowed to mint rewards\\r\\n    mapping(address => uint16) private allowedMinters;\\r\\n\\r\\n    // price for sale\\r\\n    uint256 public price;\\r\\n\\r\\n    // contract shareholders and shares information\\r\\n    address[] private shareholders;\\r\\n    mapping(address => uint16) public shares;\\r\\n\\r\\n    // shares withdrawals\\r\\n    uint256 private withdrawn;\\r\\n    mapping(address => uint256) private withdrawals;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer { }\\r\\n\\r\\n    /**\\r\\n     * Creates a new edition and sets the only allowed minter to the address that creates/owns the edition: this can be re-assigned or updated later.\\r\\n     * \\r\\n     * @param _owner can authorize, mint, gets royalties and a dividend of sales, can update the content URL.\\r\\n     * @param _info token properties\\r\\n     * @param _size number of NFTs that can be minted from this contract: set to 0 for unbound\\r\\n     * @param _price sale price in wei\\r\\n     * @param _royalties perpetual royalties paid to the creator upon token selling\\r\\n     * @param _shares array of tuples listing the shareholders and their respective shares in bps (one per each shareholder)\\r\\n     * @param _allowancesRef contract address storing array of tuples listing the allowed minters and their allowances\\r\\n     */\\r\\n    function initialize(\\r\\n        address _owner,\\r\\n        Info memory _info,\\r\\n        uint64 _size,\\r\\n        uint256 _price,\\r\\n        uint16 _royalties,\\r\\n        Shares[] memory _shares,\\r\\n        address _allowancesRef\\r\\n    ) public initializer {\\r\\n        __ERC721_init(_info.name, _info.symbol);\\r\\n        __Ownable_init();\\r\\n\\r\\n        transferOwnership(_owner); // set ownership\\r\\n        require(bytes(_info.contentUrl).length > 0, \\\"Empty content URL\\\");\\r\\n        contentUrl = _info.contentUrl;\\r\\n        contentHash = _info.contentHash;\\r\\n        require(bytes(_info.metadataUrl).length > 0, \\\"Empty metadata URL\\\");\\r\\n        metadataUrl = _info.metadataUrl;\\r\\n        size = _size;\\r\\n        price = _price;\\r\\n        require(_allowancesRef != address(0x0), \\\"Allowances: invalid reference\\\");\\r\\n        allowancesRef = _allowancesRef;\\r\\n        counter.increment(); // token ids start at 1\\r\\n\\r\\n        require(_royalties < 10_000, \\\"Royalties too high\\\");\\r\\n        royalties = _royalties;\\r\\n        \\r\\n        uint16 _totalShares;\\r\\n        for (uint256 i = 0; i < _shares.length; i++) {\\r\\n            _addPayee(_shares[i].holder, _shares[i].bps);\\r\\n            _totalShares += _shares[i].bps;\\r\\n        }\\r\\n        require(_totalShares < 10_000, \\\"Shares too high\\\");\\r\\n        _addPayee(payable(_owner), 10_000 - _totalShares);\\r\\n    }\\r\\n\\r\\n    function _addPayee(address payable _account, uint16 _shares) internal {\\r\\n        require(_account != address(0), \\\"Shareholder is zero address\\\");\\r\\n        require(_shares > 0 && _shares <= 10_000, \\\"Shares are invalid\\\");\\r\\n        require(shares[_account] == 0, \\\"Shareholder already has shares\\\");\\r\\n\\r\\n        shareholders.push(_account);\\r\\n        shares[_account] = _shares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens minted so far \\r\\n     */\\r\\n     function totalSupply() public view returns (uint256) {\\r\\n        return counter.current() - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Basic ETH-based sales operation, performed at the given set price.\\r\\n     * This operation is open to everyone as soon as the salePrice is set to a non-zero value.\\r\\n     */\\r\\n    function purchase() external payable returns (uint256) {\\r\\n        require(price > 0, \\\"Not for sale\\\");\\r\\n        require(msg.value == price, \\\"Wrong price\\\");\\r\\n        address[] memory toMint = new address[](1);\\r\\n        toMint[0] = msg.sender;\\r\\n        emit EditionSold(price, msg.sender);\\r\\n        return _mintEditions(toMint);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This operation sets the sale price, thus allowing anyone to acquire a token from this edition at the sale price via the purchase operation.\\r\\n     * Setting the sale price to 0 prevents purchase of the tokens which is then allowed only to permitted addresses.\\r\\n     * \\r\\n     * @param _wei if sale price is 0, no sale is allowed, otherwise the provided amount of WEI is needed to start the sale.\\r\\n     */\\r\\n    function setPrice(uint256 _wei) external onlyOwner {\\r\\n        price = _wei;\\r\\n        emit PriceChanged(price);\\r\\n    }\\r\\n\\r\\n    function allowanceOf(address minter) public view returns (uint16) {\\r\\n        if (minter == address(0x0)) return allowedMinters[address(0x0)];\\r\\n        return AllowancesStore(allowancesRef).allowances(minter) - allowedMinters[minter];\\r\\n    }\\r\\n\\r\\n    function allowPublic(bool allow) external onlyOwner {\\r\\n        allowedMinters[address(0x0)] = allow ? 1 : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfers all ETHs from the contract balance to the owner and shareholders.\\r\\n     */\\r\\n    function shake() external {\\r\\n        for (uint i = 0; i < shareholders.length; i++) {\\r\\n            _withdraw(payable(shareholders[i]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfers `withdrawable(msg.sender)` to the caller.\\r\\n     */\\r\\n    function withdraw() external {\\r\\n        _withdraw(payable(msg.sender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns how much the account can withdraw from this contract.\\r\\n     */\\r\\n    function withdrawable(address payable _account) external view returns (uint256) {\\r\\n        uint256 _totalReceived = address(this).balance + withdrawn;\\r\\n        return (_totalReceived * shares[_account]) / 10_000 - withdrawals[_account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * INTERNAL: attempts to transfer part of the contract balance to the caller, provided the account is a shareholder and\\r\\n     * on the basis of its shares and previous withdrawals.\\r\\n     *\\r\\n     * @param _account the address of the shareholder to pay out\\r\\n     */\\r\\n    function _withdraw(address payable _account) internal {\\r\\n        uint256 _amount = this.withdrawable(_account);\\r\\n        require(_amount != 0, \\\"Account is not due payment\\\");\\r\\n        withdrawals[_account] += _amount;\\r\\n        withdrawn += _amount;\\r\\n        AddressUpgradeable.sendValue(_account, _amount);\\r\\n        emit SharesPaid(_account, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * INTERNAL: checks if the msg.sender is allowed to mint.\\r\\n     */\\r\\n    function _isAllowedToMint(uint16 amount) internal view returns (bool) {\\r\\n        return (owner() == msg.sender) || _isPublicAllowed() || allowedMinters[msg.sender] + amount <= AllowancesStore(allowancesRef).allowances(msg.sender);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * INTERNAL: checks if the ZeroAddress is allowed to mint.\\r\\n     */\\r\\n    function _isPublicAllowed() internal view returns (bool) {\\r\\n        return (allowedMinters[address(0x0)] > 0);\\r\\n    }\\r\\n\\r\\n    function _consumeAllowance(uint16 amount) internal {\\r\\n        allowedMinters[msg.sender] += amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * If caller is listed as an allowed minter, mints one NFT for him.\\r\\n     */\\r\\n    function mint() external override returns (uint256) {\\r\\n        require(_isAllowedToMint(1), \\\"Minting not allowed\\\");\\r\\n        address[] memory toMint = new address[](1);\\r\\n        toMint[0] = msg.sender;\\r\\n        if (owner() != msg.sender && !_isPublicAllowed()) {\\r\\n            _consumeAllowance(1);\\r\\n        }\\r\\n        return _mintEditions(toMint);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Mints multiple tokens, one for each of the given list of addresses.\\r\\n     * Only the edition owner can use this operation and it is intended fo partial giveaways.\\r\\n     * \\r\\n     * @param recipients list of addresses to send the newly minted tokens to\\r\\n     */\\r\\n    function mintAndTransfer(address[] memory recipients) external override returns (uint256) {\\r\\n        require(_isAllowedToMint(uint16(recipients.length)), \\\"Minting not allowed or exceeding\\\");\\r\\n        if (owner() != msg.sender && !_isPublicAllowed()) {\\r\\n            _consumeAllowance(uint16(recipients.length));\\r\\n        }\\r\\n        return _mintEditions(recipients);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the owner of the collection of rewards.\\r\\n     */\\r\\n    function owner() public view override(OwnableUpgradeable, IMintableEditions) returns (address) {\\r\\n        return super.owner();\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public override onlyOwner {\\r\\n        require(newOwner != address(0), \\\"New owner is the zero address\\\");\\r\\n        shares[newOwner] = shares[newOwner] + shares[owner()];\\r\\n        shares[owner()] = 0;\\r\\n         _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public override onlyOwner {\\r\\n        require(address(this).balance == 0 && price == 0, \\\"Potential loss of funds\\\");\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allows for updates of content and metadata urls by the owner.\\r\\n     * Only URLs can be updated (data-uri are supported), hash cannot be updated.\\r\\n     */\\r\\n    function updateEditionsURLs(string memory _contentUrl, string memory _metadataUrl) external onlyOwner {\\r\\n        require(bytes(_contentUrl).length > 0, \\\"Empty content URL\\\");\\r\\n        contentUrl = _contentUrl;\\r\\n        require(bytes(_metadataUrl).length > 0, \\\"Empty metadata URL\\\");\\r\\n        metadataUrl = _metadataUrl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allows owner to update the allowances reference contract use for this rewards.\\r\\n     */\\r\\n    function updateAllowancesRef(address _allowancesRef) external onlyOwner {\\r\\n        require(AddressUpgradeable.isContract(_allowancesRef), \\\"Invalid new reference\\\");\\r\\n        allowancesRef = _allowancesRef;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * Returns the number of tokens still available for minting (uint64 when open edition)\\r\\n     */\\r\\n    function mintable() public view override returns (uint256) {\\r\\n        // atEditionId is one-indexed hence the need to remove one here\\r\\n        return ((size == 0) ? type(uint64).max : size + 1) - counter.current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * User burn function for token id.\\r\\n     * \\r\\n     * @param tokenId token edition identifier to burn\\r\\n     */\\r\\n    function burn(uint256 tokenId) external {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function airdrop(uint256 start, uint256 end) external returns (uint256) {\\r\\n        require(uint64(mintable()) >= AllowancesStore(allowancesRef).totalAllowed(), \\\"Sold out\\\");\\r\\n        uint256 _endAt = end < AllowancesStore(allowancesRef).length() ? end : AllowancesStore(allowancesRef).length();\\r\\n        for (uint i = start; i < _endAt; i++) {\\r\\n            address recipient = AllowancesStore(allowancesRef).minters(i);\\r\\n            uint16 allowance = AllowancesStore(allowancesRef).allowances(recipient) - allowedMinters[recipient];\\r\\n            allowedMinters[recipient] += allowance; // consumes allowance\\r\\n            for (uint j = 0; j < allowance; j++) {\\r\\n                _mint(recipient, counter.current());\\r\\n                counter.increment();\\r\\n            }\\r\\n        }   \\r\\n        return counter.current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Private function to mint without any access checks.\\r\\n     * Called by the public edition minting functions.\\r\\n     */\\r\\n    function _mintEditions(address[] memory recipients) internal returns (uint256) {\\r\\n        require(uint64(mintable()) >= recipients.length, \\\"Sold out\\\");\\r\\n        for (uint i = 0; i < recipients.length; i++) {\\r\\n            _mint(recipients[i], counter.current());\\r\\n             counter.increment();\\r\\n        }\\r\\n        return counter.current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get URI and hash for edition NFT\\r\\n     *\\r\\n     * @return metadataUrl, contentHash\\r\\n     */\\r\\n    function getURI() public view returns (string memory, bytes32, string memory) {\\r\\n        return (contentUrl, contentHash, metadataUrl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get URI for given token id\\r\\n     * \\r\\n     * @param tokenId token id to get uri for\\r\\n     * @return base64-encoded json metadata object\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"Edition doesn't exist\\\");\\r\\n        return string(abi.encodePacked(metadataUrl, \\\"?tokenId=\\\", StringsUpgradeable.toString(tokenId)));\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * ERC2981 - Gets royalty information for token\\r\\n     *\\r\\n     * @param _value the sale price for this token\\r\\n     */\\r\\n    function royaltyInfo(uint256, uint256 _value) external view override returns (address receiver, uint256 royaltyAmount) {\\r\\n        if (owner() == address(0x0)) {\\r\\n            return (owner(), 0);\\r\\n        }\\r\\n        return (owner(), (_value * royalties) / 10_000);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721Upgradeable, IERC165Upgradeable) returns (bool) {\\r\\n        return type(IERC2981Upgradeable).interfaceId == interfaceId || ERC721Upgradeable.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x36e6e4a928bc13da9d9a0f0ae58cea8e548c2c259e20b332b7cee5ad00b9bbfb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff16806200002c575060005460ff16155b620000945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000b7576000805461ffff19166101011790555b8015620000ca576000805461ff00191690555b5061516080620000db6000396000f3fe6080604052600436106102d15760003560e01c806379847b9911610179578063b88d4fde116100d6578063ce7c2ac21161008a578063f053dc5c11610064578063f053dc5c14610827578063f0553be71461084e578063f2fde38b1461086e57600080fd5b8063ce7c2ac214610780578063d7b97ef6146107b1578063e985e9c5146107d157600080fd5b8063c87b56dd116100bb578063c87b56dd1461072b578063cd29c71a1461074b578063ce513b6f1461076057600080fd5b8063b88d4fde146106d8578063bfd2385e146106f857600080fd5b8063949d225d1161012d5780639b8581d0116101125780639b8581d014610682578063a035b1fe146106a2578063a22cb465146106b857600080fd5b8063949d225d1461063357806395d89b411461066d57600080fd5b8063850710c31161015e578063850710c3146105e95780638da5cb5b146105fe57806391b7f5ed1461061357600080fd5b806379847b9914610599578063825f98d4146105d457600080fd5b80633ccfd60b11610232578063646c2e33116101e657806370a08231116101c057806370a0823114610540578063715018a6146105605780637754305c1461057557600080fd5b8063646c2e331461050257806364edfbf0146105185780636f243a9c1461052057600080fd5b806342966c681161021757806342966c68146104ad5780634bf365df146104cd5780636352211e146104e257600080fd5b80633ccfd60b1461047857806342842e0e1461048d57600080fd5b806318160ddd1161028957806323b872dd1161026e57806323b872dd146103ec5780632a55205a1461040c5780632add8f5b1461045857600080fd5b806318160ddd146103b757806318f0043f146103cc57600080fd5b8063081812fc116102ba578063081812fc1461032d578063095ea7b3146103725780631249c58b1461039457600080fd5b806301ffc9a7146102d657806306fdde031461030b575b600080fd5b3480156102e257600080fd5b506102f66102f136600461457e565b61088e565b60405190151581526020015b60405180910390f35b34801561031757600080fd5b506103206108ea565b6040516103029190614611565b34801561033957600080fd5b5061034d610348366004614624565b61097c565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610302565b34801561037e57600080fd5b5061039261038d36600461466f565b610a5b565b005b3480156103a057600080fd5b506103a9610be8565b604051908152602001610302565b3480156103c357600080fd5b506103a9610d2c565b3480156103d857600080fd5b506103926103e73660046148fc565b610d48565b3480156103f857600080fd5b50610392610407366004614a52565b611267565b34801561041857600080fd5b5061042c610427366004614a93565b611309565b6040805173ffffffffffffffffffffffffffffffffffffffff9093168352602083019190915201610302565b34801561046457600080fd5b50610392610473366004614ab5565b611383565b34801561048457600080fd5b506103926114c6565b34801561049957600080fd5b506103926104a8366004614a52565b6114d1565b3480156104b957600080fd5b506103926104c8366004614624565b6114ec565b3480156104d957600080fd5b506103a9611567565b3480156104ee57600080fd5b5061034d6104fd366004614624565b6115bf565b34801561050e57600080fd5b506103a960cb5481565b6103a9611671565b34801561052c57600080fd5b506103a961053b366004614a93565b6117e9565b34801561054c57600080fd5b506103a961055b366004614ab5565b611cad565b34801561056c57600080fd5b50610392611d7b565b34801561058157600080fd5b5061058a611e7f565b60405161030293929190614ad2565b3480156105a557600080fd5b5060cd5461034d906a0100000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156105e057600080fd5b50610392611faf565b3480156105f557600080fd5b5061032061200b565b34801561060a57600080fd5b5061034d612099565b34801561061f57600080fd5b5061039261062e366004614624565b6120ba565b34801561063f57600080fd5b5060cd546106549067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610302565b34801561067957600080fd5b5061032061217b565b34801561068e57600080fd5b5061039261069d366004614b17565b61218a565b3480156106ae57600080fd5b506103a960cf5481565b3480156106c457600080fd5b506103926106d3366004614b32565b61227c565b3480156106e457600080fd5b506103926106f3366004614b67565b61228b565b34801561070457600080fd5b50610718610713366004614ab5565b612333565b60405161ffff9091168152602001610302565b34801561073757600080fd5b50610320610746366004614624565b612456565b34801561075757600080fd5b50610320612516565b34801561076c57600080fd5b506103a961077b366004614ab5565b612523565b34801561078c57600080fd5b5061071861079b366004614ab5565b60d16020526000908152604090205461ffff1681565b3480156107bd57600080fd5b506103a96107cc366004614be7565b612597565b3480156107dd57600080fd5b506102f66107ec366004614c81565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152606a6020908152604080832093909416825291909152205460ff1690565b34801561083357600080fd5b5060cd546107189068010000000000000000900461ffff1681565b34801561085a57600080fd5b50610392610869366004614cba565b61267a565b34801561087a57600080fd5b50610392610889366004614ab5565b6127fd565b60007f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806108e457506108e482612a1b565b92915050565b6060606580546108f990614d1e565b80601f016020809104026020016040519081016040528092919081815260200182805461092590614d1e565b80156109725780601f1061094757610100808354040283529160200191610972565b820191906000526020600020905b81548152906001019060200180831161095557829003601f168201915b5050505050905090565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16610a32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526069602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610a66826115bf565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610a29565b3373ffffffffffffffffffffffffffffffffffffffff82161480610b4d5750610b4d81336107ec565b610bd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610a29565b610be38383612afe565b505050565b6000610bf46001612b9e565b610c5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d696e74696e67206e6f7420616c6c6f776564000000000000000000000000006044820152606401610a29565b604080516001808252818301909252600091602080830190803683370190505090503381600081518110610c9057610c90614d72565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015233610cbe612099565b73ffffffffffffffffffffffffffffffffffffffff1614158015610d0e57506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff16155b15610d1d57610d1d6001612cdb565b610d2681612d1b565b91505090565b60006001610d3960c95490565b610d439190614dd0565b905090565b600054610100900460ff1680610d61575060005460ff16155b610ded576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a29565b600054610100900460ff16158015610e2c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610e3e87600001518860200151612df4565b610e46612f25565b610e4f886127fd565b600087604001515111610ebe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f456d70747920636f6e74656e742055524c0000000000000000000000000000006044820152606401610a29565b60408701518051610ed79160ca916020909101906144b7565b50606087015160cb55608087015151610f4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f456d707479206d657461646174612055524c00000000000000000000000000006044820152606401610a29565b60808701518051610f659160cc916020909101906144b7565b5060cd80547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff881617905560cf85905573ffffffffffffffffffffffffffffffffffffffff821661101c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416c6c6f77616e6365733a20696e76616c6964207265666572656e63650000006044820152606401610a29565b60cd80547fffff0000000000000000000000000000000000000000ffffffffffffffffffff166a010000000000000000000073ffffffffffffffffffffffffffffffffffffffff85160217905560c9805460010190556127108461ffff16106110e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f526f79616c7469657320746f6f206869676800000000000000000000000000006044820152606401610a29565b60cd80547fffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffff166801000000000000000061ffff8716021790556000805b84518110156111a85761116b85828151811061113c5761113c614d72565b60200260200101516000015186838151811061115a5761115a614d72565b60200260200101516020015161304a565b84818151811061117d5761117d614d72565b602002602001015160200151826111949190614de7565b9150806111a081614e0d565b91505061111e565b506127108161ffff1610611218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f53686172657320746f6f206869676800000000000000000000000000000000006044820152606401610a29565b61122d8961122883612710614e46565b61304a565b50801561125d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050505050565b611272335b82613288565b6112fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610a29565b610be38383836133f4565b60008080611315612099565b73ffffffffffffffffffffffffffffffffffffffff16141561134457611339612099565b60009150915061137c565b61134c612099565b60cd546127109061136d9068010000000000000000900461ffff1686614e69565b6113779190614ed5565b915091505b9250929050565b3361138c612099565b73ffffffffffffffffffffffffffffffffffffffff1614611409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a29565b803b611471576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c6964206e6577207265666572656e636500000000000000000000006044820152606401610a29565b60cd805473ffffffffffffffffffffffffffffffffffffffff9092166a0100000000000000000000027fffff0000000000000000000000000000000000000000ffffffffffffffffffff909216919091179055565b6114cf3361365b565b565b610be38383836040518060200160405280600081525061228b565b6114f53361126c565b61155b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420617070726f76656400000000000000000000000000000000000000006044820152606401610a29565b61156481613815565b50565b600061157260c95490565b60cd5467ffffffffffffffff16156115a15760cd5461159c9067ffffffffffffffff166001614ee9565b6115ab565b67ffffffffffffffff5b67ffffffffffffffff16610d439190614dd0565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16806108e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610a29565b60008060cf54116116de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420666f722073616c6500000000000000000000000000000000000000006044820152606401610a29565b60cf543414611749576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f57726f6e672070726963650000000000000000000000000000000000000000006044820152606401610a29565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061177f5761177f614d72565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910182015260cf546040805191825233928201929092527f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a1610d2681612d1b565b600060cd600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166390e3b35c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561185357600080fd5b505afa158015611867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188b9190614f0c565b67ffffffffffffffff1661189d611567565b67ffffffffffffffff16101561190f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f536f6c64206f75740000000000000000000000000000000000000000000000006044820152606401610a29565b600060cd600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b15801561197957600080fd5b505afa15801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b19190614f29565b8310611a5c5760cd600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1f57600080fd5b505afa158015611a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a579190614f29565b611a5e565b825b9050835b81811015611ca05760cd546040517f8623ec7b000000000000000000000000000000000000000000000000000000008152600481018390526000916a0100000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1690638623ec7b9060240160206040518083038186803b158015611ae357600080fd5b505afa158015611af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1b9190614f42565b73ffffffffffffffffffffffffffffffffffffffff818116600081815260ce60205260408082205460cd5491517f2b603c710000000000000000000000000000000000000000000000000000000081526004810194909452949550909361ffff16926a01000000000000000000009091041690632b603c719060240160206040518083038186803b158015611baf57600080fd5b505afa158015611bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be79190614f5f565b611bf19190614e46565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260ce6020526040812080549293508392909190611c2f90849061ffff16614de7565b92506101000a81548161ffff021916908361ffff16021790555060005b8161ffff16811015611c8a57611c6a83611c6560c95490565b6138e2565b611c7860c980546001019055565b80611c8281614e0d565b915050611c4c565b5050508080611c9890614e0d565b915050611a62565b5060c9545b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8216611d52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610a29565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526068602052604090205490565b33611d84612099565b73ffffffffffffffffffffffffffffffffffffffff1614611e01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a29565b47158015611e0f575060cf54155b611e75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f506f74656e7469616c206c6f7373206f662066756e64730000000000000000006044820152606401610a29565b6114cf6000613aa4565b60606000606060ca60cb5460cc828054611e9890614d1e565b80601f0160208091040260200160405190810160405280929190818152602001828054611ec490614d1e565b8015611f115780601f10611ee657610100808354040283529160200191611f11565b820191906000526020600020905b815481529060010190602001808311611ef457829003601f168201915b50505050509250808054611f2490614d1e565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5090614d1e565b8015611f9d5780601f10611f7257610100808354040283529160200191611f9d565b820191906000526020600020905b815481529060010190602001808311611f8057829003601f168201915b50505050509050925092509250909192565b60005b60d05481101561156457611ff960d08281548110611fd257611fd2614d72565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1661365b565b8061200381614e0d565b915050611fb2565b60ca805461201890614d1e565b80601f016020809104026020016040519081016040528092919081815260200182805461204490614d1e565b80156120915780601f1061206657610100808354040283529160200191612091565b820191906000526020600020905b81548152906001019060200180831161207457829003601f168201915b505050505081565b6000610d4360975473ffffffffffffffffffffffffffffffffffffffff1690565b336120c3612099565b73ffffffffffffffffffffffffffffffffffffffff1614612140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a29565b60cf8190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6229060200160405180910390a150565b6060606680546108f990614d1e565b33612193612099565b73ffffffffffffffffffffffffffffffffffffffff1614612210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a29565b8061221c57600061221f565b60015b6000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660ff9290921691909117905550565b612287338383613b1b565b5050565b6122953383613288565b612321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610a29565b61232d84848484613c49565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff82166123845750506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff1690565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260ce6020526040908190205460cd5491517f2b603c71000000000000000000000000000000000000000000000000000000008152600481019390935261ffff16926a01000000000000000000009091041690632b603c719060240160206040518083038186803b15801561241457600080fd5b505afa158015612428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244c9190614f5f565b6108e49190614e46565b60008181526067602052604090205460609073ffffffffffffffffffffffffffffffffffffffff166124e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f45646974696f6e20646f65736e277420657869737400000000000000000000006044820152606401610a29565b60cc6124ef83613cec565b604051602001612500929190614f98565b6040516020818303038152906040529050919050565b60cc805461201890614d1e565b60008060d2544761253491906150a2565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260d3602090815260408083205460d190925290912054919250906127109061257c9061ffff1684614e69565b6125869190614ed5565b6125909190614dd0565b9392505050565b60006125a38251612b9e565b612609576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d696e74696e67206e6f7420616c6c6f776564206f7220657863656564696e676044820152606401610a29565b33612612612099565b73ffffffffffffffffffffffffffffffffffffffff161415801561266257506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff16155b15612671576126718251612cdb565b6108e482612d1b565b33612683612099565b73ffffffffffffffffffffffffffffffffffffffff1614612700576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a29565b600082511161276b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f456d70747920636f6e74656e742055524c0000000000000000000000000000006044820152606401610a29565b815161277e9060ca9060208501906144b7565b5060008151116127ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f456d707479206d657461646174612055524c00000000000000000000000000006044820152606401610a29565b8051610be39060cc9060208401906144b7565b33612806612099565b73ffffffffffffffffffffffffffffffffffffffff1614612883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a29565b73ffffffffffffffffffffffffffffffffffffffff8116612900576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6577206f776e657220697320746865207a65726f20616464726573730000006044820152606401610a29565b60d1600061290c612099565b73ffffffffffffffffffffffffffffffffffffffff90811682526020808301939093526040918201600090812054918516815260d19093529120546129589161ffff9081169116614de7565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d160208190526040822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff949094169390931790925590816129bb612099565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff9290921691909117905561156481613aa4565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480612aae57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108e457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146108e4565b600081815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190612b58826115bf565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600033612ba9612099565b73ffffffffffffffffffffffffffffffffffffffff161480612bf857506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff1615155b806108e4575060cd546040517f2b603c710000000000000000000000000000000000000000000000000000000081523360048201526a010000000000000000000090910473ffffffffffffffffffffffffffffffffffffffff1690632b603c719060240160206040518083038186803b158015612c7457600080fd5b505afa158015612c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cac9190614f5f565b33600090815260ce602052604090205461ffff91821691612ccf91859116614de7565b61ffff16111592915050565b33600090815260ce602052604081208054839290612cfe90849061ffff16614de7565b92506101000a81548161ffff021916908361ffff16021790555050565b60008151612d27611567565b67ffffffffffffffff161015612d99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f536f6c64206f75740000000000000000000000000000000000000000000000006044820152606401610a29565b60005b8251811015612deb57612dcb838281518110612dba57612dba614d72565b6020026020010151611c6560c95490565b612dd960c980546001019055565b80612de381614e0d565b915050612d9c565b5060c9546108e4565b600054610100900460ff1680612e0d575060005460ff16155b612e99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a29565b600054610100900460ff16158015612ed857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612ee0613e1e565b612ee8613e1e565b612ef28383613f32565b8015610be357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b600054610100900460ff1680612f3e575060005460ff16155b612fca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a29565b600054610100900460ff1615801561300957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b613011613e1e565b613019614071565b801561156457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b73ffffffffffffffffffffffffffffffffffffffff82166130c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5368617265686f6c646572206973207a65726f206164647265737300000000006044820152606401610a29565b60008161ffff161180156130e157506127108161ffff1611155b613147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5368617265732061726520696e76616c696400000000000000000000000000006044820152606401610a29565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d1602052604090205461ffff16156131d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5368617265686f6c64657220616c7265616479206861732073686172657300006044820152606401610a29565b60d08054600181019091557fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff939093169283179055600091825260d1602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16613339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610a29565b6000613344836115bf565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806133b357508373ffffffffffffffffffffffffffffffffffffffff1661339b8461097c565b73ffffffffffffffffffffffffffffffffffffffff16145b80611ca5575073ffffffffffffffffffffffffffffffffffffffff8082166000908152606a602090815260408083209388168352929052205460ff16611ca5565b8273ffffffffffffffffffffffffffffffffffffffff16613414826115bf565b73ffffffffffffffffffffffffffffffffffffffff16146134b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610a29565b73ffffffffffffffffffffffffffffffffffffffff8216613559576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610a29565b613564600082612afe565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260686020526040812080546001929061359a908490614dd0565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604081208054600192906135d59084906150a2565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6040517fce513b6f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152600090309063ce513b6f9060240160206040518083038186803b1580156136c357600080fd5b505afa1580156136d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136fb9190614f29565b905080613764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4163636f756e74206973206e6f7420647565207061796d656e740000000000006044820152606401610a29565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d36020526040812080548392906137999084906150a2565b925050819055508060d260008282546137b291906150a2565b909155506137c29050828261415e565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527fc271d5cc8e899d2f13fb92ceb234c8beb4f1b82ebee351bd4fd728a79773e12b910160405180910390a15050565b6000613820826115bf565b905061382d600083612afe565b73ffffffffffffffffffffffffffffffffffffffff81166000908152606860205260408120805460019290613863908490614dd0565b909155505060008281526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b73ffffffffffffffffffffffffffffffffffffffff821661395f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a29565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff16156139eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a29565b73ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260408120805460019290613a219084906150a2565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6097805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613bb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a29565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152606a602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613c548484846133f4565b613c60848484846142b8565b61232d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a29565b606081613d2c57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115613d565780613d4081614e0d565b9150613d4f9050600a83614ed5565b9150613d30565b60008167ffffffffffffffff811115613d7157613d7161469b565b6040519080825280601f01601f191660200182016040528015613d9b576020820181803683370190505b5090505b8415611ca557613db0600183614dd0565b9150613dbd600a866150ba565b613dc89060306150a2565b60f81b818381518110613ddd57613ddd614d72565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613e17600a86614ed5565b9450613d9f565b600054610100900460ff1680613e37575060005460ff16155b613ec3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a29565b600054610100900460ff1615801561301957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016610101179055801561156457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff1680613f4b575060005460ff16155b613fd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a29565b600054610100900460ff1615801561401657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b82516140299060659060208601906144b7565b50815161403d9060669060208501906144b7565b508015610be357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b600054610100900460ff168061408a575060005460ff16155b614116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a29565b600054610100900460ff1615801561415557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b61301933613aa4565b804710156141c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610a29565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114614222576040519150601f19603f3d011682016040523d82523d6000602084013e614227565b606091505b5050905080610be3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610a29565b600073ffffffffffffffffffffffffffffffffffffffff84163b156144ac576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a029061432f9033908990889088906004016150ce565b602060405180830381600087803b15801561434957600080fd5b505af1925050508015614397575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526143949181019061510d565b60015b614461573d8080156143c5576040519150601f19603f3d011682016040523d82523d6000602084013e6143ca565b606091505b508051614459576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a29565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611ca5565b506001949350505050565b8280546144c390614d1e565b90600052602060002090601f0160209004810192826144e5576000855561452b565b82601f106144fe57805160ff191683800117855561452b565b8280016001018555821561452b579182015b8281111561452b578251825591602001919060010190614510565b5061453792915061453b565b5090565b5b80821115614537576000815560010161453c565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461156457600080fd5b60006020828403121561459057600080fd5b813561259081614550565b60005b838110156145b657818101518382015260200161459e565b8381111561232d5750506000910152565b600081518084526145df81602086016020860161459b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061259060208301846145c7565b60006020828403121561463657600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461156457600080fd5b803561466a8161463d565b919050565b6000806040838503121561468257600080fd5b823561468d8161463d565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156146ed576146ed61469b565b60405290565b60405160a0810167ffffffffffffffff811182821017156146ed576146ed61469b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561475d5761475d61469b565b604052919050565b600067ffffffffffffffff83111561477f5761477f61469b565b6147b060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011601614716565b90508281528383830111156147c457600080fd5b828260208301376000602084830101529392505050565b600082601f8301126147ec57600080fd5b61259083833560208501614765565b67ffffffffffffffff8116811461156457600080fd5b803561466a816147fb565b61ffff8116811461156457600080fd5b803561466a8161481c565b600067ffffffffffffffff8211156148515761485161469b565b5060051b60200190565b600082601f83011261486c57600080fd5b8135602061488161487c83614837565b614716565b82815260069290921b840181019181810190868411156148a057600080fd5b8286015b848110156148f157604081890312156148bd5760008081fd5b6148c56146ca565b81356148d08161463d565b8152818501356148df8161481c565b818601528352918301916040016148a4565b509695505050505050565b600080600080600080600060e0888a03121561491757600080fd5b87356149228161463d565b9650602088013567ffffffffffffffff8082111561493f57600080fd5b9089019060a0828c03121561495357600080fd5b61495b6146f3565b82358281111561496a57600080fd5b6149768d8286016147db565b82525060208301358281111561498b57600080fd5b6149978d8286016147db565b6020830152506040830135828111156149af57600080fd5b6149bb8d8286016147db565b604083015250606083013560608201526080830135828111156149dd57600080fd5b6149e98d8286016147db565b60808301525097506149fd60408b01614811565b965060608a01359550614a1260808b0161482c565b945060a08a0135915080821115614a2857600080fd5b50614a358a828b0161485b565b925050614a4460c0890161465f565b905092959891949750929550565b600080600060608486031215614a6757600080fd5b8335614a728161463d565b92506020840135614a828161463d565b929592945050506040919091013590565b60008060408385031215614aa657600080fd5b50508035926020909101359150565b600060208284031215614ac757600080fd5b81356125908161463d565b606081526000614ae560608301866145c7565b8460208401528281036040840152614afd81856145c7565b9695505050505050565b8035801515811461466a57600080fd5b600060208284031215614b2957600080fd5b61259082614b07565b60008060408385031215614b4557600080fd5b8235614b508161463d565b9150614b5e60208401614b07565b90509250929050565b60008060008060808587031215614b7d57600080fd5b8435614b888161463d565b93506020850135614b988161463d565b925060408501359150606085013567ffffffffffffffff811115614bbb57600080fd5b8501601f81018713614bcc57600080fd5b614bdb87823560208401614765565b91505092959194509250565b60006020808385031215614bfa57600080fd5b823567ffffffffffffffff811115614c1157600080fd5b8301601f81018513614c2257600080fd5b8035614c3061487c82614837565b81815260059190911b82018301908381019087831115614c4f57600080fd5b928401925b82841015614c76578335614c678161463d565b82529284019290840190614c54565b979650505050505050565b60008060408385031215614c9457600080fd5b8235614c9f8161463d565b91506020830135614caf8161463d565b809150509250929050565b60008060408385031215614ccd57600080fd5b823567ffffffffffffffff80821115614ce557600080fd5b614cf1868387016147db565b93506020850135915080821115614d0757600080fd5b50614d14858286016147db565b9150509250929050565b600181811c90821680614d3257607f821691505b60208210811415614d6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015614de257614de2614da1565b500390565b600061ffff808316818516808303821115614e0457614e04614da1565b01949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614e3f57614e3f614da1565b5060010190565b600061ffff83811690831681811015614e6157614e61614da1565b039392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614ea157614ea1614da1565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614ee457614ee4614ea6565b500490565b600067ffffffffffffffff808316818516808303821115614e0457614e04614da1565b600060208284031215614f1e57600080fd5b8151612590816147fb565b600060208284031215614f3b57600080fd5b5051919050565b600060208284031215614f5457600080fd5b81516125908161463d565b600060208284031215614f7157600080fd5b81516125908161481c565b60008151614f8e81856020860161459b565b9290920192915050565b600080845481600182811c915080831680614fb457607f831692505b6020808410821415614fed577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b81801561500157600181146150305761505d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0086168952848901965061505d565b60008b81526020902060005b868110156150555781548b82015290850190830161503c565b505084890196505b505050505050615099615093827f3f746f6b656e49643d0000000000000000000000000000000000000000000000815260090190565b85614f7c565b95945050505050565b600082198211156150b5576150b5614da1565b500190565b6000826150c9576150c9614ea6565b500690565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152614afd60808301846145c7565b60006020828403121561511f57600080fd5b81516125908161455056fea2646970667358221220df4dde4a6abf712c96c72d6e597360dfa7be72f9e87d612dbf5463554b2c5c7d64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102d15760003560e01c806379847b9911610179578063b88d4fde116100d6578063ce7c2ac21161008a578063f053dc5c11610064578063f053dc5c14610827578063f0553be71461084e578063f2fde38b1461086e57600080fd5b8063ce7c2ac214610780578063d7b97ef6146107b1578063e985e9c5146107d157600080fd5b8063c87b56dd116100bb578063c87b56dd1461072b578063cd29c71a1461074b578063ce513b6f1461076057600080fd5b8063b88d4fde146106d8578063bfd2385e146106f857600080fd5b8063949d225d1161012d5780639b8581d0116101125780639b8581d014610682578063a035b1fe146106a2578063a22cb465146106b857600080fd5b8063949d225d1461063357806395d89b411461066d57600080fd5b8063850710c31161015e578063850710c3146105e95780638da5cb5b146105fe57806391b7f5ed1461061357600080fd5b806379847b9914610599578063825f98d4146105d457600080fd5b80633ccfd60b11610232578063646c2e33116101e657806370a08231116101c057806370a0823114610540578063715018a6146105605780637754305c1461057557600080fd5b8063646c2e331461050257806364edfbf0146105185780636f243a9c1461052057600080fd5b806342966c681161021757806342966c68146104ad5780634bf365df146104cd5780636352211e146104e257600080fd5b80633ccfd60b1461047857806342842e0e1461048d57600080fd5b806318160ddd1161028957806323b872dd1161026e57806323b872dd146103ec5780632a55205a1461040c5780632add8f5b1461045857600080fd5b806318160ddd146103b757806318f0043f146103cc57600080fd5b8063081812fc116102ba578063081812fc1461032d578063095ea7b3146103725780631249c58b1461039457600080fd5b806301ffc9a7146102d657806306fdde031461030b575b600080fd5b3480156102e257600080fd5b506102f66102f136600461457e565b61088e565b60405190151581526020015b60405180910390f35b34801561031757600080fd5b506103206108ea565b6040516103029190614611565b34801561033957600080fd5b5061034d610348366004614624565b61097c565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610302565b34801561037e57600080fd5b5061039261038d36600461466f565b610a5b565b005b3480156103a057600080fd5b506103a9610be8565b604051908152602001610302565b3480156103c357600080fd5b506103a9610d2c565b3480156103d857600080fd5b506103926103e73660046148fc565b610d48565b3480156103f857600080fd5b50610392610407366004614a52565b611267565b34801561041857600080fd5b5061042c610427366004614a93565b611309565b6040805173ffffffffffffffffffffffffffffffffffffffff9093168352602083019190915201610302565b34801561046457600080fd5b50610392610473366004614ab5565b611383565b34801561048457600080fd5b506103926114c6565b34801561049957600080fd5b506103926104a8366004614a52565b6114d1565b3480156104b957600080fd5b506103926104c8366004614624565b6114ec565b3480156104d957600080fd5b506103a9611567565b3480156104ee57600080fd5b5061034d6104fd366004614624565b6115bf565b34801561050e57600080fd5b506103a960cb5481565b6103a9611671565b34801561052c57600080fd5b506103a961053b366004614a93565b6117e9565b34801561054c57600080fd5b506103a961055b366004614ab5565b611cad565b34801561056c57600080fd5b50610392611d7b565b34801561058157600080fd5b5061058a611e7f565b60405161030293929190614ad2565b3480156105a557600080fd5b5060cd5461034d906a0100000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156105e057600080fd5b50610392611faf565b3480156105f557600080fd5b5061032061200b565b34801561060a57600080fd5b5061034d612099565b34801561061f57600080fd5b5061039261062e366004614624565b6120ba565b34801561063f57600080fd5b5060cd546106549067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610302565b34801561067957600080fd5b5061032061217b565b34801561068e57600080fd5b5061039261069d366004614b17565b61218a565b3480156106ae57600080fd5b506103a960cf5481565b3480156106c457600080fd5b506103926106d3366004614b32565b61227c565b3480156106e457600080fd5b506103926106f3366004614b67565b61228b565b34801561070457600080fd5b50610718610713366004614ab5565b612333565b60405161ffff9091168152602001610302565b34801561073757600080fd5b50610320610746366004614624565b612456565b34801561075757600080fd5b50610320612516565b34801561076c57600080fd5b506103a961077b366004614ab5565b612523565b34801561078c57600080fd5b5061071861079b366004614ab5565b60d16020526000908152604090205461ffff1681565b3480156107bd57600080fd5b506103a96107cc366004614be7565b612597565b3480156107dd57600080fd5b506102f66107ec366004614c81565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152606a6020908152604080832093909416825291909152205460ff1690565b34801561083357600080fd5b5060cd546107189068010000000000000000900461ffff1681565b34801561085a57600080fd5b50610392610869366004614cba565b61267a565b34801561087a57600080fd5b50610392610889366004614ab5565b6127fd565b60007f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806108e457506108e482612a1b565b92915050565b6060606580546108f990614d1e565b80601f016020809104026020016040519081016040528092919081815260200182805461092590614d1e565b80156109725780601f1061094757610100808354040283529160200191610972565b820191906000526020600020905b81548152906001019060200180831161095557829003601f168201915b5050505050905090565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16610a32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526069602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610a66826115bf565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610a29565b3373ffffffffffffffffffffffffffffffffffffffff82161480610b4d5750610b4d81336107ec565b610bd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610a29565b610be38383612afe565b505050565b6000610bf46001612b9e565b610c5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d696e74696e67206e6f7420616c6c6f776564000000000000000000000000006044820152606401610a29565b604080516001808252818301909252600091602080830190803683370190505090503381600081518110610c9057610c90614d72565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015233610cbe612099565b73ffffffffffffffffffffffffffffffffffffffff1614158015610d0e57506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff16155b15610d1d57610d1d6001612cdb565b610d2681612d1b565b91505090565b60006001610d3960c95490565b610d439190614dd0565b905090565b600054610100900460ff1680610d61575060005460ff16155b610ded576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a29565b600054610100900460ff16158015610e2c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610e3e87600001518860200151612df4565b610e46612f25565b610e4f886127fd565b600087604001515111610ebe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f456d70747920636f6e74656e742055524c0000000000000000000000000000006044820152606401610a29565b60408701518051610ed79160ca916020909101906144b7565b50606087015160cb55608087015151610f4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f456d707479206d657461646174612055524c00000000000000000000000000006044820152606401610a29565b60808701518051610f659160cc916020909101906144b7565b5060cd80547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff881617905560cf85905573ffffffffffffffffffffffffffffffffffffffff821661101c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416c6c6f77616e6365733a20696e76616c6964207265666572656e63650000006044820152606401610a29565b60cd80547fffff0000000000000000000000000000000000000000ffffffffffffffffffff166a010000000000000000000073ffffffffffffffffffffffffffffffffffffffff85160217905560c9805460010190556127108461ffff16106110e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f526f79616c7469657320746f6f206869676800000000000000000000000000006044820152606401610a29565b60cd80547fffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffff166801000000000000000061ffff8716021790556000805b84518110156111a85761116b85828151811061113c5761113c614d72565b60200260200101516000015186838151811061115a5761115a614d72565b60200260200101516020015161304a565b84818151811061117d5761117d614d72565b602002602001015160200151826111949190614de7565b9150806111a081614e0d565b91505061111e565b506127108161ffff1610611218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f53686172657320746f6f206869676800000000000000000000000000000000006044820152606401610a29565b61122d8961122883612710614e46565b61304a565b50801561125d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050505050565b611272335b82613288565b6112fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610a29565b610be38383836133f4565b60008080611315612099565b73ffffffffffffffffffffffffffffffffffffffff16141561134457611339612099565b60009150915061137c565b61134c612099565b60cd546127109061136d9068010000000000000000900461ffff1686614e69565b6113779190614ed5565b915091505b9250929050565b3361138c612099565b73ffffffffffffffffffffffffffffffffffffffff1614611409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a29565b803b611471576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c6964206e6577207265666572656e636500000000000000000000006044820152606401610a29565b60cd805473ffffffffffffffffffffffffffffffffffffffff9092166a0100000000000000000000027fffff0000000000000000000000000000000000000000ffffffffffffffffffff909216919091179055565b6114cf3361365b565b565b610be38383836040518060200160405280600081525061228b565b6114f53361126c565b61155b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420617070726f76656400000000000000000000000000000000000000006044820152606401610a29565b61156481613815565b50565b600061157260c95490565b60cd5467ffffffffffffffff16156115a15760cd5461159c9067ffffffffffffffff166001614ee9565b6115ab565b67ffffffffffffffff5b67ffffffffffffffff16610d439190614dd0565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16806108e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610a29565b60008060cf54116116de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420666f722073616c6500000000000000000000000000000000000000006044820152606401610a29565b60cf543414611749576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f57726f6e672070726963650000000000000000000000000000000000000000006044820152606401610a29565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061177f5761177f614d72565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910182015260cf546040805191825233928201929092527f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a1610d2681612d1b565b600060cd600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166390e3b35c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561185357600080fd5b505afa158015611867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188b9190614f0c565b67ffffffffffffffff1661189d611567565b67ffffffffffffffff16101561190f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f536f6c64206f75740000000000000000000000000000000000000000000000006044820152606401610a29565b600060cd600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b15801561197957600080fd5b505afa15801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b19190614f29565b8310611a5c5760cd600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1f57600080fd5b505afa158015611a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a579190614f29565b611a5e565b825b9050835b81811015611ca05760cd546040517f8623ec7b000000000000000000000000000000000000000000000000000000008152600481018390526000916a0100000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1690638623ec7b9060240160206040518083038186803b158015611ae357600080fd5b505afa158015611af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1b9190614f42565b73ffffffffffffffffffffffffffffffffffffffff818116600081815260ce60205260408082205460cd5491517f2b603c710000000000000000000000000000000000000000000000000000000081526004810194909452949550909361ffff16926a01000000000000000000009091041690632b603c719060240160206040518083038186803b158015611baf57600080fd5b505afa158015611bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be79190614f5f565b611bf19190614e46565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260ce6020526040812080549293508392909190611c2f90849061ffff16614de7565b92506101000a81548161ffff021916908361ffff16021790555060005b8161ffff16811015611c8a57611c6a83611c6560c95490565b6138e2565b611c7860c980546001019055565b80611c8281614e0d565b915050611c4c565b5050508080611c9890614e0d565b915050611a62565b5060c9545b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8216611d52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610a29565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526068602052604090205490565b33611d84612099565b73ffffffffffffffffffffffffffffffffffffffff1614611e01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a29565b47158015611e0f575060cf54155b611e75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f506f74656e7469616c206c6f7373206f662066756e64730000000000000000006044820152606401610a29565b6114cf6000613aa4565b60606000606060ca60cb5460cc828054611e9890614d1e565b80601f0160208091040260200160405190810160405280929190818152602001828054611ec490614d1e565b8015611f115780601f10611ee657610100808354040283529160200191611f11565b820191906000526020600020905b815481529060010190602001808311611ef457829003601f168201915b50505050509250808054611f2490614d1e565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5090614d1e565b8015611f9d5780601f10611f7257610100808354040283529160200191611f9d565b820191906000526020600020905b815481529060010190602001808311611f8057829003601f168201915b50505050509050925092509250909192565b60005b60d05481101561156457611ff960d08281548110611fd257611fd2614d72565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1661365b565b8061200381614e0d565b915050611fb2565b60ca805461201890614d1e565b80601f016020809104026020016040519081016040528092919081815260200182805461204490614d1e565b80156120915780601f1061206657610100808354040283529160200191612091565b820191906000526020600020905b81548152906001019060200180831161207457829003601f168201915b505050505081565b6000610d4360975473ffffffffffffffffffffffffffffffffffffffff1690565b336120c3612099565b73ffffffffffffffffffffffffffffffffffffffff1614612140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a29565b60cf8190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6229060200160405180910390a150565b6060606680546108f990614d1e565b33612193612099565b73ffffffffffffffffffffffffffffffffffffffff1614612210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a29565b8061221c57600061221f565b60015b6000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660ff9290921691909117905550565b612287338383613b1b565b5050565b6122953383613288565b612321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610a29565b61232d84848484613c49565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff82166123845750506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff1690565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260ce6020526040908190205460cd5491517f2b603c71000000000000000000000000000000000000000000000000000000008152600481019390935261ffff16926a01000000000000000000009091041690632b603c719060240160206040518083038186803b15801561241457600080fd5b505afa158015612428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244c9190614f5f565b6108e49190614e46565b60008181526067602052604090205460609073ffffffffffffffffffffffffffffffffffffffff166124e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f45646974696f6e20646f65736e277420657869737400000000000000000000006044820152606401610a29565b60cc6124ef83613cec565b604051602001612500929190614f98565b6040516020818303038152906040529050919050565b60cc805461201890614d1e565b60008060d2544761253491906150a2565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260d3602090815260408083205460d190925290912054919250906127109061257c9061ffff1684614e69565b6125869190614ed5565b6125909190614dd0565b9392505050565b60006125a38251612b9e565b612609576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d696e74696e67206e6f7420616c6c6f776564206f7220657863656564696e676044820152606401610a29565b33612612612099565b73ffffffffffffffffffffffffffffffffffffffff161415801561266257506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff16155b15612671576126718251612cdb565b6108e482612d1b565b33612683612099565b73ffffffffffffffffffffffffffffffffffffffff1614612700576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a29565b600082511161276b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f456d70747920636f6e74656e742055524c0000000000000000000000000000006044820152606401610a29565b815161277e9060ca9060208501906144b7565b5060008151116127ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f456d707479206d657461646174612055524c00000000000000000000000000006044820152606401610a29565b8051610be39060cc9060208401906144b7565b33612806612099565b73ffffffffffffffffffffffffffffffffffffffff1614612883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a29565b73ffffffffffffffffffffffffffffffffffffffff8116612900576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6577206f776e657220697320746865207a65726f20616464726573730000006044820152606401610a29565b60d1600061290c612099565b73ffffffffffffffffffffffffffffffffffffffff90811682526020808301939093526040918201600090812054918516815260d19093529120546129589161ffff9081169116614de7565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d160208190526040822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff949094169390931790925590816129bb612099565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff9290921691909117905561156481613aa4565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480612aae57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108e457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146108e4565b600081815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190612b58826115bf565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600033612ba9612099565b73ffffffffffffffffffffffffffffffffffffffff161480612bf857506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff1615155b806108e4575060cd546040517f2b603c710000000000000000000000000000000000000000000000000000000081523360048201526a010000000000000000000090910473ffffffffffffffffffffffffffffffffffffffff1690632b603c719060240160206040518083038186803b158015612c7457600080fd5b505afa158015612c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cac9190614f5f565b33600090815260ce602052604090205461ffff91821691612ccf91859116614de7565b61ffff16111592915050565b33600090815260ce602052604081208054839290612cfe90849061ffff16614de7565b92506101000a81548161ffff021916908361ffff16021790555050565b60008151612d27611567565b67ffffffffffffffff161015612d99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f536f6c64206f75740000000000000000000000000000000000000000000000006044820152606401610a29565b60005b8251811015612deb57612dcb838281518110612dba57612dba614d72565b6020026020010151611c6560c95490565b612dd960c980546001019055565b80612de381614e0d565b915050612d9c565b5060c9546108e4565b600054610100900460ff1680612e0d575060005460ff16155b612e99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a29565b600054610100900460ff16158015612ed857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612ee0613e1e565b612ee8613e1e565b612ef28383613f32565b8015610be357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b600054610100900460ff1680612f3e575060005460ff16155b612fca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a29565b600054610100900460ff1615801561300957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b613011613e1e565b613019614071565b801561156457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b73ffffffffffffffffffffffffffffffffffffffff82166130c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5368617265686f6c646572206973207a65726f206164647265737300000000006044820152606401610a29565b60008161ffff161180156130e157506127108161ffff1611155b613147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5368617265732061726520696e76616c696400000000000000000000000000006044820152606401610a29565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d1602052604090205461ffff16156131d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5368617265686f6c64657220616c7265616479206861732073686172657300006044820152606401610a29565b60d08054600181019091557fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff939093169283179055600091825260d1602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16613339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610a29565b6000613344836115bf565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806133b357508373ffffffffffffffffffffffffffffffffffffffff1661339b8461097c565b73ffffffffffffffffffffffffffffffffffffffff16145b80611ca5575073ffffffffffffffffffffffffffffffffffffffff8082166000908152606a602090815260408083209388168352929052205460ff16611ca5565b8273ffffffffffffffffffffffffffffffffffffffff16613414826115bf565b73ffffffffffffffffffffffffffffffffffffffff16146134b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610a29565b73ffffffffffffffffffffffffffffffffffffffff8216613559576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610a29565b613564600082612afe565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260686020526040812080546001929061359a908490614dd0565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604081208054600192906135d59084906150a2565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6040517fce513b6f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152600090309063ce513b6f9060240160206040518083038186803b1580156136c357600080fd5b505afa1580156136d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136fb9190614f29565b905080613764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4163636f756e74206973206e6f7420647565207061796d656e740000000000006044820152606401610a29565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d36020526040812080548392906137999084906150a2565b925050819055508060d260008282546137b291906150a2565b909155506137c29050828261415e565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527fc271d5cc8e899d2f13fb92ceb234c8beb4f1b82ebee351bd4fd728a79773e12b910160405180910390a15050565b6000613820826115bf565b905061382d600083612afe565b73ffffffffffffffffffffffffffffffffffffffff81166000908152606860205260408120805460019290613863908490614dd0565b909155505060008281526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b73ffffffffffffffffffffffffffffffffffffffff821661395f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a29565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff16156139eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a29565b73ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260408120805460019290613a219084906150a2565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6097805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613bb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a29565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152606a602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613c548484846133f4565b613c60848484846142b8565b61232d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a29565b606081613d2c57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115613d565780613d4081614e0d565b9150613d4f9050600a83614ed5565b9150613d30565b60008167ffffffffffffffff811115613d7157613d7161469b565b6040519080825280601f01601f191660200182016040528015613d9b576020820181803683370190505b5090505b8415611ca557613db0600183614dd0565b9150613dbd600a866150ba565b613dc89060306150a2565b60f81b818381518110613ddd57613ddd614d72565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613e17600a86614ed5565b9450613d9f565b600054610100900460ff1680613e37575060005460ff16155b613ec3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a29565b600054610100900460ff1615801561301957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016610101179055801561156457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff1680613f4b575060005460ff16155b613fd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a29565b600054610100900460ff1615801561401657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b82516140299060659060208601906144b7565b50815161403d9060669060208501906144b7565b508015610be357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b600054610100900460ff168061408a575060005460ff16155b614116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a29565b600054610100900460ff1615801561415557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b61301933613aa4565b804710156141c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610a29565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114614222576040519150601f19603f3d011682016040523d82523d6000602084013e614227565b606091505b5050905080610be3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610a29565b600073ffffffffffffffffffffffffffffffffffffffff84163b156144ac576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a029061432f9033908990889088906004016150ce565b602060405180830381600087803b15801561434957600080fd5b505af1925050508015614397575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526143949181019061510d565b60015b614461573d8080156143c5576040519150601f19603f3d011682016040523d82523d6000602084013e6143ca565b606091505b508051614459576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a29565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611ca5565b506001949350505050565b8280546144c390614d1e565b90600052602060002090601f0160209004810192826144e5576000855561452b565b82601f106144fe57805160ff191683800117855561452b565b8280016001018555821561452b579182015b8281111561452b578251825591602001919060010190614510565b5061453792915061453b565b5090565b5b80821115614537576000815560010161453c565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461156457600080fd5b60006020828403121561459057600080fd5b813561259081614550565b60005b838110156145b657818101518382015260200161459e565b8381111561232d5750506000910152565b600081518084526145df81602086016020860161459b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061259060208301846145c7565b60006020828403121561463657600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461156457600080fd5b803561466a8161463d565b919050565b6000806040838503121561468257600080fd5b823561468d8161463d565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156146ed576146ed61469b565b60405290565b60405160a0810167ffffffffffffffff811182821017156146ed576146ed61469b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561475d5761475d61469b565b604052919050565b600067ffffffffffffffff83111561477f5761477f61469b565b6147b060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011601614716565b90508281528383830111156147c457600080fd5b828260208301376000602084830101529392505050565b600082601f8301126147ec57600080fd5b61259083833560208501614765565b67ffffffffffffffff8116811461156457600080fd5b803561466a816147fb565b61ffff8116811461156457600080fd5b803561466a8161481c565b600067ffffffffffffffff8211156148515761485161469b565b5060051b60200190565b600082601f83011261486c57600080fd5b8135602061488161487c83614837565b614716565b82815260069290921b840181019181810190868411156148a057600080fd5b8286015b848110156148f157604081890312156148bd5760008081fd5b6148c56146ca565b81356148d08161463d565b8152818501356148df8161481c565b818601528352918301916040016148a4565b509695505050505050565b600080600080600080600060e0888a03121561491757600080fd5b87356149228161463d565b9650602088013567ffffffffffffffff8082111561493f57600080fd5b9089019060a0828c03121561495357600080fd5b61495b6146f3565b82358281111561496a57600080fd5b6149768d8286016147db565b82525060208301358281111561498b57600080fd5b6149978d8286016147db565b6020830152506040830135828111156149af57600080fd5b6149bb8d8286016147db565b604083015250606083013560608201526080830135828111156149dd57600080fd5b6149e98d8286016147db565b60808301525097506149fd60408b01614811565b965060608a01359550614a1260808b0161482c565b945060a08a0135915080821115614a2857600080fd5b50614a358a828b0161485b565b925050614a4460c0890161465f565b905092959891949750929550565b600080600060608486031215614a6757600080fd5b8335614a728161463d565b92506020840135614a828161463d565b929592945050506040919091013590565b60008060408385031215614aa657600080fd5b50508035926020909101359150565b600060208284031215614ac757600080fd5b81356125908161463d565b606081526000614ae560608301866145c7565b8460208401528281036040840152614afd81856145c7565b9695505050505050565b8035801515811461466a57600080fd5b600060208284031215614b2957600080fd5b61259082614b07565b60008060408385031215614b4557600080fd5b8235614b508161463d565b9150614b5e60208401614b07565b90509250929050565b60008060008060808587031215614b7d57600080fd5b8435614b888161463d565b93506020850135614b988161463d565b925060408501359150606085013567ffffffffffffffff811115614bbb57600080fd5b8501601f81018713614bcc57600080fd5b614bdb87823560208401614765565b91505092959194509250565b60006020808385031215614bfa57600080fd5b823567ffffffffffffffff811115614c1157600080fd5b8301601f81018513614c2257600080fd5b8035614c3061487c82614837565b81815260059190911b82018301908381019087831115614c4f57600080fd5b928401925b82841015614c76578335614c678161463d565b82529284019290840190614c54565b979650505050505050565b60008060408385031215614c9457600080fd5b8235614c9f8161463d565b91506020830135614caf8161463d565b809150509250929050565b60008060408385031215614ccd57600080fd5b823567ffffffffffffffff80821115614ce557600080fd5b614cf1868387016147db565b93506020850135915080821115614d0757600080fd5b50614d14858286016147db565b9150509250929050565b600181811c90821680614d3257607f821691505b60208210811415614d6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015614de257614de2614da1565b500390565b600061ffff808316818516808303821115614e0457614e04614da1565b01949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614e3f57614e3f614da1565b5060010190565b600061ffff83811690831681811015614e6157614e61614da1565b039392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614ea157614ea1614da1565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614ee457614ee4614ea6565b500490565b600067ffffffffffffffff808316818516808303821115614e0457614e04614da1565b600060208284031215614f1e57600080fd5b8151612590816147fb565b600060208284031215614f3b57600080fd5b5051919050565b600060208284031215614f5457600080fd5b81516125908161463d565b600060208284031215614f7157600080fd5b81516125908161481c565b60008151614f8e81856020860161459b565b9290920192915050565b600080845481600182811c915080831680614fb457607f831692505b6020808410821415614fed577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b81801561500157600181146150305761505d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0086168952848901965061505d565b60008b81526020902060005b868110156150555781548b82015290850190830161503c565b505084890196505b505050505050615099615093827f3f746f6b656e49643d0000000000000000000000000000000000000000000000815260090190565b85614f7c565b95945050505050565b600082198211156150b5576150b5614da1565b500190565b6000826150c9576150c9614ea6565b500690565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152614afd60808301846145c7565b60006020828403121561511f57600080fd5b81516125908161455056fea2646970667358221220df4dde4a6abf712c96c72d6e597360dfa7be72f9e87d612dbf5463554b2c5c7d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "tokenId": "token edition identifier to burn"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getURI()": {
        "returns": {
          "_0": "metadataUrl, contentHash"
        }
      },
      "initialize(address,(string,string,string,bytes32,string),uint64,uint256,uint16,(address,uint16)[],address)": {
        "params": {
          "_allowancesRef": "contract address storing array of tuples listing the allowed minters and their allowances",
          "_info": "token properties",
          "_owner": "can authorize, mint, gets royalties and a dividend of sales, can update the content URL.",
          "_price": "sale price in wei",
          "_royalties": "perpetual royalties paid to the creator upon token selling",
          "_shares": "array of tuples listing the shareholders and their respective shares in bps (one per each shareholder)",
          "_size": "number of NFTs that can be minted from this contract: set to 0 for unbound"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintAndTransfer(address[])": {
        "params": {
          "recipients": "list of addresses to send the newly minted tokens to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_value": "the sale price for this token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setPrice(uint256)": {
        "params": {
          "_wei": "if sale price is 0, no sale is allowed, otherwise the provided amount of WEI is needed to start the sale."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "User burn function for token id. "
      },
      "getURI()": {
        "notice": "Get URI and hash for edition NFT"
      },
      "initialize(address,(string,string,string,bytes32,string),uint64,uint256,uint16,(address,uint16)[],address)": {
        "notice": "Creates a new edition and sets the only allowed minter to the address that creates/owns the edition: this can be re-assigned or updated later. "
      },
      "mint()": {
        "notice": "If caller is listed as an allowed minter, mints one NFT for him."
      },
      "mintAndTransfer(address[])": {
        "notice": "Mints multiple tokens, one for each of the given list of addresses. Only the edition owner can use this operation and it is intended fo partial giveaways. "
      },
      "mintable()": {
        "notice": "Returns the number of tokens still available for minting (uint64 when open edition)"
      },
      "owner()": {
        "notice": "Returns the owner of the collection of rewards."
      },
      "purchase()": {
        "notice": "Basic ETH-based sales operation, performed at the given set price. This operation is open to everyone as soon as the salePrice is set to a non-zero value."
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "ERC2981 - Gets royalty information for token"
      },
      "setPrice(uint256)": {
        "notice": "This operation sets the sale price, thus allowing anyone to acquire a token from this edition at the sale price via the purchase operation. Setting the sale price to 0 prevents purchase of the tokens which is then allowed only to permitted addresses. "
      },
      "shake()": {
        "notice": "Transfers all ETHs from the contract balance to the owner and shareholders."
      },
      "tokenURI(uint256)": {
        "notice": "Get URI for given token id "
      },
      "totalSupply()": {
        "notice": "Returns the number of tokens minted so far "
      },
      "updateAllowancesRef(address)": {
        "notice": "Allows owner to update the allowances reference contract use for this rewards."
      },
      "updateEditionsURLs(string,string)": {
        "notice": "Allows for updates of content and metadata urls by the owner. Only URLs can be updated (data-uri are supported), hash cannot be updated."
      },
      "withdraw()": {
        "notice": "Transfers `withdrawable(msg.sender)` to the caller."
      },
      "withdrawable(address)": {
        "notice": "Returns how much the account can withdraw from this contract."
      }
    },
    "notice": "This contract allows dynamic NFT minting.  Operations allow for selling publicly, partial or total giveaways, direct giveaways and rewardings.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 971,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 974,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2432,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2815,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1151,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1153,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1157,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1161,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1165,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1171,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1982,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4242,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "counter",
        "offset": 0,
        "slot": "201",
        "type": "t_struct(Counter)2439_storage"
      },
      {
        "astId": 4244,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "contentUrl",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 4246,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "contentHash",
        "offset": 0,
        "slot": "203",
        "type": "t_bytes32"
      },
      {
        "astId": 4248,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "metadataUrl",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 4250,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "size",
        "offset": 0,
        "slot": "205",
        "type": "t_uint64"
      },
      {
        "astId": 4252,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "royalties",
        "offset": 8,
        "slot": "205",
        "type": "t_uint16"
      },
      {
        "astId": 4254,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "allowancesRef",
        "offset": 10,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 4258,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "allowedMinters",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 4260,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "price",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 4263,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "shareholders",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4267,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "shares",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 4269,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "withdrawn",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 4273,
        "contract": "contracts/MintableRewards.sol:MintableRewards",
        "label": "withdrawals",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2439_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 2438,
            "contract": "contracts/MintableRewards.sol:MintableRewards",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}