{
  "address": "0x48736C8181fCc27AF861Ce17F2246076172A6356",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EditionSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SharesPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "airdrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "allowPublic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "allowanceOf",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowancesRef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contentHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contentUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contentUrl",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "metadataUrl",
              "type": "string"
            }
          ],
          "internalType": "struct MintableEditions.Info",
          "name": "_info",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "_size",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_royalties",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "holder",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct MintableEditions.Shares[]",
          "name": "_shares",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_allowancesRef",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "mintAndTransfer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royalties",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wei",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contentUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_metadataUrl",
          "type": "string"
        }
      ],
      "name": "updateEditionsURLs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7dfd332e52fed436822269dd69351776a2ebae7e9ba1c73b5be978f601602ea1",
  "receipt": {
    "to": null,
    "from": "0xDEE48aB42ceEb910c8C61a8966A57Dcf3E8B6706",
    "contractAddress": "0x48736C8181fCc27AF861Ce17F2246076172A6356",
    "transactionIndex": 12,
    "gasUsed": "4442101",
    "logsBloom": "0x
    "blockHash": "0xb60ea021254c6fae061b2083cfbe7894c2771e71ace583612d0f698144921a35",
    "transactionHash": "0x7dfd332e52fed436822269dd69351776a2ebae7e9ba1c73b5be978f601602ea1",
    "logs": [],
    "blockNumber": 10041780,
    "cumulativeGasUsed": "5246699",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "480e2a14d701261721c34a203fee264d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditionSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SharesPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"allowPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"allowanceOf\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowancesRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadataUrl\",\"type\":\"string\"}],\"internalType\":\"struct MintableEditions.Info\",\"name\":\"_info\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"_size\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_royalties\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct MintableEditions.Shares[]\",\"name\":\"_shares\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_allowancesRef\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"mintAndTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contentUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metadataUrl\",\"type\":\"string\"}],\"name\":\"updateEditionsURLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"token edition identifier to burn\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getURI()\":{\"returns\":{\"_0\":\"contentUrl, contentHash\"}},\"initialize(address,(string,string,string,bytes32,string),uint64,uint256,uint16,(address,uint16)[],address)\":{\"params\":{\"_allowancesRef\":\"contract address storing array of tuples listing the allowed minters and their allowances\",\"_info\":\"token properties\",\"_owner\":\"can authorize, mint, gets royalties and a dividend of sales, can update the content URL.\",\"_price\":\"sale price in wei\",\"_royalties\":\"perpetual royalties paid to the creator upon token selling\",\"_shares\":\"array of tuples listing the shareholders and their respective shares in bps (one per each shareholder)\",\"_size\":\"number of NFTs that can be minted from this contract: set to 0 for unbound\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintAndTransfer(address[])\":{\"params\":{\"recipients\":\"list of addresses to send the newly minted tokens to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_value\":\"the sale price for this token\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setPrice(uint256)\":{\"params\":{\"_wei\":\"if sale price is 0, no sale is allowed, otherwise the provided amount of WEI is needed to start the sale.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"User burn function for token id. \"},\"getURI()\":{\"notice\":\"Get URIs and hash for edition NFT\"},\"initialize(address,(string,string,string,bytes32,string),uint64,uint256,uint16,(address,uint16)[],address)\":{\"notice\":\"Creates a new edition and sets the only allowed minter to the address that creates/owns the edition: this can be re-assigned or updated later. \"},\"mint()\":{\"notice\":\"If caller is listed as an allowed minter, mints one NFT for him.\"},\"mintAndTransfer(address[])\":{\"notice\":\"Mints multiple tokens, one for each of the given list of addresses. Only the edition owner can use this operation and it is intended fo partial giveaways. \"},\"mintable()\":{\"notice\":\"Returns the number of tokens still available for minting (uint64 when open edition)\"},\"owner()\":{\"notice\":\"Returns the owner of the collection of editions.\"},\"purchase()\":{\"notice\":\"Basic ETH-based sales operation, performed at the given set price. This operation is open to everyone as soon as the salePrice is set to a non-zero value.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"ERC2981 - Gets royalty information for token\"},\"setPrice(uint256)\":{\"notice\":\"This operation sets the sale price, thus allowing anyone to acquire a token from this edition at the sale price via the purchase operation. Setting the sale price to 0 prevents purchase of the tokens which is then allowed only to permitted addresses. \"},\"shake()\":{\"notice\":\"Transfers all ETHs from the contract balance to the owner and shareholders.\"},\"tokenURI(uint256)\":{\"notice\":\"Get URI for given token id \"},\"totalSupply()\":{\"notice\":\"Returns the number of tokens minted so far \"},\"updateEditionsURLs(string,string)\":{\"notice\":\"Allows for updates of edition urls by the owner of the edition. Only URLs can be updated (data-uris are supported), hashes cannot be updated.\"},\"withdraw()\":{\"notice\":\"Transfers `withdrawable(msg.sender)` to the caller.\"},\"withdrawable(address)\":{\"notice\":\"Returns how much the account can withdraw from this contract.\"}},\"notice\":\"This contract allows dynamic NFT minting.  Operations allow for selling publicly, partial or total giveaways, direct giveaways and rewardings.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintableEditions.sol\":\"MintableEditions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdfe5444167c3b8cb94bb80044f56148151466d62a86b950c4b57c1ab8bdced7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb1503d6ad7d4251970bfc4fa2d7e6fa2c7716010a0b3d642bdc078cdbef5ecc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xd8a3c09ad479d297be526fe6945ca29a018178ba04c2f35081a8dda7faedc7c8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xc88de28441ae0fbf215384ecbc12b675f862dcdf851daa5a6943cef4c91e4373\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x49915fbc84c030ba425312356c1a0a28f81cdee5ab637f7a264752b52243fec6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8116b65b11e0a65ad6cf40cf2d71d2dacad80ddc37ad42af965fc919afb19e5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5f8d2e5137f7603eeaa0516e5b40dc6e637f179edea8134f1dbef9754c9baf2b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe0091487bb0da2016b050e276b74e83a3a4fa641f65600558281a3dc3ef24994\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x704add6904e5156bac4fb870ee851af4c2d004ae0cac22fd030162843fd1d611\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"contracts/AllowancesStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2592\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2584\\u2591\\u2580\\u2588\\u2580\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2584\\u2592\\u2584\\u2588\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\u2591\\u2591\\u2592\\u2588\\u2580\\u2584\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2591\\u2591\\u2592\\u2588\\u2592\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2584\\u2591\\u2588\\u2580\\u2584\\u2591\\u2584\\u2580\\u2580\\r\\n * \\u2591\\u2588\\u2580\\u2588\\u2591\\u2588\\u2580\\u2584\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2584\\u2584\\u2591\\u2588\\u2592\\u2580\\u2592\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\u2592\\u2591\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2584\\u2584\\u2591\\u2580\\u2584\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2588\\u2591\\u2588\\u2580\\u2584\\u2592\\u2588\\u2584\\u2580\\u2592\\u2584\\u2588\\u2588\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n\\r\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * Holds receivers addresses and allowances\\r\\n */\\r\\ncontract AllowancesStore is AccessControlUpgradeable {\\r\\n    struct Allowance {\\r\\n        address minter;\\r\\n        uint16 amount;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint16) public allowances;\\r\\n    address[] public minters;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer { }\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n    \\r\\n    function updateAllowances(Allowance[] memory _allowances) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        for (uint i = 0; i < _allowances.length; i++) {\\r\\n            if (_allowances[i].amount != 0 && allowances[_allowances[i].minter] == 0) {\\r\\n                minters.push(_allowances[i].minter);\\r\\n            }\\r\\n            allowances[_allowances[i].minter] = _allowances[i].amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function totalAllowed() public view returns (uint64) {\\r\\n        uint64 _allowed = 0;\\r\\n        for (uint i = 0; i < minters.length; i++) {\\r\\n            _allowed += allowances[minters[i]];\\r\\n        }\\r\\n        return _allowed;\\r\\n    }\\r\\n\\r\\n    function count() public view returns (uint256) {\\r\\n        return minters.length;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x786af7ed71c0bc80c93eed4c2e7a8b43bf1d36e384a748d0e7f923853fc94042\",\"license\":\"MIT\"},\"contracts/IMintableEditions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2588\\u2591\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2592\\u2584\\u2580\\u2584\\u2591\\u2591\\u2591\\u2592\\u2591\\u2591\\u2591\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2588\\u2591\\u2584\\u2580\\u2584\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2584\\u2580\\u2580\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\r\\n * \\u2592\\u2588\\u2592\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2591\\u2588\\u2580\\u2588\\u2592\\u2591\\u2591\\u2580\\u2580\\u2592\\u2591\\u2591\\u2588\\u2584\\u2584\\u2592\\u2588\\u2584\\u2580\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2592\\u2580\\u2588\\u2592\\u2584\\u2588\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ninterface IMintableEditions {\\r\\n    /**\\r\\n     * Mints one token for the msg.sender. \\r\\n     */\\r\\n    function mint() external returns (uint256);\\r\\n    \\r\\n    /**\\r\\n     * Mints multiple tokens, one for each of the given addresses.\\r\\n     * \\r\\n     * @param to list of addresses to send the newly minted tokens to\\r\\n     */\\r\\n    function mintAndTransfer(address[] memory to) external returns (uint256);\\r\\n\\r\\n    /** \\r\\n     * Returns the number of tokens still available for minting\\r\\n     */\\r\\n    function mintable() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * Returns the owner of the editions contract.\\r\\n     */\\r\\n    function owner() external view returns (address);\\r\\n}\",\"keccak256\":\"0xa48a27c42e2dadbc3a9e80ce2305f26b411f09ef842e0214107dc639c0df3658\",\"license\":\"MIT\"},\"contracts/MintableEditions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2592\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2584\\u2591\\u2580\\u2588\\u2580\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2584\\u2592\\u2584\\u2588\\u2591\\u2591\\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\u2591\\u2591\\u2592\\u2588\\u2580\\u2584\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2591\\u2591\\u2592\\u2588\\u2592\\u2584\\u2580\\u2584\\u2592\\u2588\\u2580\\u2584\\u2591\\u2588\\u2580\\u2584\\u2591\\u2584\\u2580\\u2580\\r\\n * \\u2591\\u2588\\u2580\\u2588\\u2591\\u2588\\u2580\\u2584\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2584\\u2584\\u2591\\u2588\\u2592\\u2580\\u2592\\u2588\\u2592\\u2591\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\u2592\\u2591\\u2591\\u2588\\u2580\\u2584\\u2591\\u2588\\u2584\\u2584\\u2591\\u2580\\u2584\\u2580\\u2584\\u2580\\u2591\\u2588\\u2580\\u2588\\u2591\\u2588\\u2580\\u2584\\u2592\\u2588\\u2584\\u2580\\u2592\\u2584\\u2588\\u2588\\r\\n *\\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\r\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\r\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./IMintableEditions.sol\\\";\\r\\nimport \\\"./AllowancesStore.sol\\\";\\r\\n\\r\\n/**\\r\\n * This contract allows dynamic NFT minting.\\r\\n * \\r\\n * Operations allow for selling publicly, partial or total giveaways, direct giveaways and rewardings.\\r\\n */\\r\\ncontract MintableEditions is ERC721Upgradeable, IERC2981Upgradeable, IMintableEditions, OwnableUpgradeable {\\r\\n    \\r\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\r\\n    \\r\\n    event PriceChanged(uint256 amount);\\r\\n    event EditionSold(uint256 price, address owner);\\r\\n    event SharesPaid(address to, uint256 amount);\\r\\n\\r\\n    struct Shares {\\r\\n        address payable holder;\\r\\n        uint16 bps;\\r\\n    }\\r\\n\\r\\n    struct Allowance {\\r\\n        address minter;\\r\\n        uint16 amount;\\r\\n    }\\r\\n\\r\\n    struct Info {\\r\\n        // name of editions\\r\\n        string name;\\r\\n        // symbol of the tokens minted by this contract\\r\\n        string symbol;\\r\\n        // content URL of the token editions\\r\\n        string contentUrl;\\r\\n        // SHA256 of the token editions content in bytes32 format (0xHASH)\\r\\n        bytes32 contentHash;\\r\\n        // token editions metadata URL\\r\\n        string metadataUrl;\\r\\n    }\\r\\n\\r\\n    // token id counter\\r\\n    CountersUpgradeable.Counter private counter;\\r\\n\\r\\n    // token content URL\\r\\n    string public contentUrl;\\r\\n    // hash for the associated content\\r\\n    bytes32 public contentHash;\\r\\n    // token metadata URL\\r\\n    string public metadataUrl;\\r\\n    \\r\\n    // the number of editions this contract can mint\\r\\n    uint64 public size; // 8\\r\\n    \\r\\n    // royalties ERC2981 in bps\\r\\n    uint16 public royalties; // 2\\r\\n\\r\\n    address public allowancesRef; // 20\\r\\n\\r\\n    // addresses allowed to mint editions\\r\\n    mapping(address => uint16) private allowedMinters;\\r\\n\\r\\n    // price for sale\\r\\n    uint256 public price;\\r\\n\\r\\n    // contract shareholders and shares information\\r\\n    address[] private shareholders;\\r\\n    mapping(address => uint16) public shares;\\r\\n\\r\\n    // shares withdrawals\\r\\n    uint256 private withdrawn;\\r\\n    mapping(address => uint256) private withdrawals;\\r\\n\\r\\n    constructor() initializer { }\\r\\n\\r\\n    /**\\r\\n     * Creates a new edition and sets the only allowed minter to the address that creates/owns the edition: this can be re-assigned or updated later.\\r\\n     * \\r\\n     * @param _owner can authorize, mint, gets royalties and a dividend of sales, can update the content URL.\\r\\n     * @param _info token properties\\r\\n     * @param _size number of NFTs that can be minted from this contract: set to 0 for unbound\\r\\n     * @param _price sale price in wei\\r\\n     * @param _royalties perpetual royalties paid to the creator upon token selling\\r\\n     * @param _shares array of tuples listing the shareholders and their respective shares in bps (one per each shareholder)\\r\\n     * @param _allowancesRef contract address storing array of tuples listing the allowed minters and their allowances\\r\\n     */\\r\\n    function initialize(\\r\\n        address _owner,\\r\\n        Info memory _info,\\r\\n        uint64 _size,\\r\\n        uint256 _price,\\r\\n        uint16 _royalties,\\r\\n        Shares[] memory _shares,\\r\\n        address _allowancesRef\\r\\n    ) public initializer {\\r\\n        __ERC721_init(_info.name, _info.symbol);\\r\\n        __Ownable_init();\\r\\n\\r\\n        transferOwnership(_owner); // set ownership\\r\\n        require(bytes(_info.contentUrl).length > 0, \\\"Empty content URL\\\");\\r\\n        contentUrl = _info.contentUrl;\\r\\n        contentHash = _info.contentHash;\\r\\n        require(bytes(_info.metadataUrl).length > 0, \\\"Empty metadata URL\\\");\\r\\n        metadataUrl = _info.metadataUrl;\\r\\n        size = _size;\\r\\n        price = _price;\\r\\n        require(_allowancesRef != address(0x0), \\\"Allowances: invalid reference\\\");\\r\\n        allowancesRef = _allowancesRef;\\r\\n        counter.increment(); // token ids start at 1\\r\\n\\r\\n        require(_royalties < 10_000, \\\"Royalties too high\\\");\\r\\n        royalties = _royalties;\\r\\n        \\r\\n        uint16 _totalShares;\\r\\n        for (uint256 i = 0; i < _shares.length; i++) {\\r\\n            _addPayee(_shares[i].holder, _shares[i].bps);\\r\\n            _totalShares += _shares[i].bps;\\r\\n        }\\r\\n        require(_totalShares < 10_000, \\\"Shares too high\\\");\\r\\n        _addPayee(payable(_owner), 10_000 - _totalShares);\\r\\n    }\\r\\n\\r\\n    function _addPayee(address payable _account, uint16 _shares) internal {\\r\\n        require(_account != address(0), \\\"Shareholder is zero address\\\");\\r\\n        require(_shares > 0 && _shares <= 10_000, \\\"Shares are invalid\\\");\\r\\n        require(shares[_account] == 0, \\\"Shareholder already has shares\\\");\\r\\n\\r\\n        shareholders.push(_account);\\r\\n        shares[_account] = _shares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens minted so far \\r\\n     */\\r\\n     function totalSupply() public view returns (uint256) {\\r\\n        return counter.current() - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Basic ETH-based sales operation, performed at the given set price.\\r\\n     * This operation is open to everyone as soon as the salePrice is set to a non-zero value.\\r\\n     */\\r\\n    function purchase() external payable returns (uint256) {\\r\\n        require(price > 0, \\\"Not for sale\\\");\\r\\n        require(msg.value == price, \\\"Wrong price\\\");\\r\\n        address[] memory toMint = new address[](1);\\r\\n        toMint[0] = msg.sender;\\r\\n        emit EditionSold(price, msg.sender);\\r\\n        return _mintEditions(toMint);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This operation sets the sale price, thus allowing anyone to acquire a token from this edition at the sale price via the purchase operation.\\r\\n     * Setting the sale price to 0 prevents purchase of the tokens which is then allowed only to permitted addresses.\\r\\n     * \\r\\n     * @param _wei if sale price is 0, no sale is allowed, otherwise the provided amount of WEI is needed to start the sale.\\r\\n     */\\r\\n    function setPrice(uint256 _wei) external onlyOwner {\\r\\n        price = _wei;\\r\\n        emit PriceChanged(price);\\r\\n    }\\r\\n\\r\\n    function allowanceOf(address minter) public view returns (uint16) {\\r\\n        if (minter == address(0x0)) return allowedMinters[address(0x0)];\\r\\n        return AllowancesStore(allowancesRef).allowances(minter) - allowedMinters[minter];\\r\\n    }\\r\\n\\r\\n    function allowPublic(bool allow) external onlyOwner {\\r\\n        allowedMinters[address(0x0)] = allow ? 1 : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfers all ETHs from the contract balance to the owner and shareholders.\\r\\n     */\\r\\n    function shake() external {\\r\\n        for (uint i = 0; i < shareholders.length; i++) {\\r\\n            _withdraw(payable(shareholders[i]));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfers `withdrawable(msg.sender)` to the caller.\\r\\n     */\\r\\n    function withdraw() external {\\r\\n        _withdraw(payable(msg.sender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns how much the account can withdraw from this contract.\\r\\n     */\\r\\n    function withdrawable(address payable _account) external view returns (uint256) {\\r\\n        uint256 _totalReceived = address(this).balance + withdrawn;\\r\\n        return (_totalReceived * shares[_account]) / 10_000 - withdrawals[_account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * INTERNAL: attempts to transfer part of the contract balance to the caller, provided the account is a shareholder and\\r\\n     * on the basis of its shares and previous withdrawals.\\r\\n     *\\r\\n     * @param _account the address of the shareholder to pay out\\r\\n     */\\r\\n    function _withdraw(address payable _account) internal {\\r\\n        uint256 _amount = this.withdrawable(_account);\\r\\n        require(_amount != 0, \\\"Account is not due payment\\\");\\r\\n        withdrawals[_account] += _amount;\\r\\n        withdrawn += _amount;\\r\\n        AddressUpgradeable.sendValue(_account, _amount);\\r\\n        emit SharesPaid(_account, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * INTERNAL: checks if the msg.sender is allowed to mint.\\r\\n     */\\r\\n    function _isAllowedToMint(uint16 amount) internal view returns (bool) {\\r\\n        return (owner() == msg.sender) || _isPublicAllowed() || allowedMinters[msg.sender] + amount <= AllowancesStore(allowancesRef).allowances(msg.sender);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * INTERNAL: checks if the ZeroAddress is allowed to mint.\\r\\n     */\\r\\n    function _isPublicAllowed() internal view returns (bool) {\\r\\n        return (allowedMinters[address(0x0)] > 0);\\r\\n    }\\r\\n\\r\\n    function _consumeAllowance(uint16 amount) internal {\\r\\n        allowedMinters[msg.sender] += amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * If caller is listed as an allowed minter, mints one NFT for him.\\r\\n     */\\r\\n    function mint() external override returns (uint256) {\\r\\n        require(_isAllowedToMint(1), \\\"Minting not allowed\\\");\\r\\n        address[] memory toMint = new address[](1);\\r\\n        toMint[0] = msg.sender;\\r\\n        if (owner() != msg.sender && !_isPublicAllowed()) {\\r\\n            _consumeAllowance(1);\\r\\n        }\\r\\n        return _mintEditions(toMint);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Mints multiple tokens, one for each of the given list of addresses.\\r\\n     * Only the edition owner can use this operation and it is intended fo partial giveaways.\\r\\n     * \\r\\n     * @param recipients list of addresses to send the newly minted tokens to\\r\\n     */\\r\\n    function mintAndTransfer(address[] memory recipients) external override returns (uint256) {\\r\\n        require(_isAllowedToMint(uint16(recipients.length)), \\\"Minting not allowed or exceeding\\\");\\r\\n        if (owner() != msg.sender && !_isPublicAllowed()) {\\r\\n            _consumeAllowance(uint16(recipients.length));\\r\\n        }\\r\\n        return _mintEditions(recipients);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the owner of the collection of editions.\\r\\n     */\\r\\n    function owner() public view override(OwnableUpgradeable, IMintableEditions) returns (address) {\\r\\n        return super.owner();\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public override onlyOwner {\\r\\n        require(newOwner != address(0), \\\"New owner is the zero address\\\");\\r\\n        shares[newOwner] = shares[newOwner] + shares[owner()];\\r\\n        shares[owner()] = 0;\\r\\n         _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public override onlyOwner {\\r\\n        require(address(this).balance == 0 && price == 0, \\\"Potential loss of funds\\\");\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allows for updates of edition urls by the owner of the edition.\\r\\n     * Only URLs can be updated (data-uris are supported), hashes cannot be updated.\\r\\n     */\\r\\n    function updateEditionsURLs(string memory _contentUrl, string memory _metadataUrl) external onlyOwner {\\r\\n        require(bytes(_contentUrl).length > 0, \\\"Empty content URL\\\");\\r\\n        contentUrl = _contentUrl;\\r\\n        metadataUrl = _metadataUrl;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * Returns the number of tokens still available for minting (uint64 when open edition)\\r\\n     */\\r\\n    function mintable() public view override returns (uint256) {\\r\\n        // atEditionId is one-indexed hence the need to remove one here\\r\\n        return ((size == 0) ? type(uint64).max : size + 1) - counter.current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * User burn function for token id.\\r\\n     * \\r\\n     * @param tokenId token edition identifier to burn\\r\\n     */\\r\\n    function burn(uint256 tokenId) external {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function airdrop(uint256 start, uint256 end) external returns (uint256) {\\r\\n        require(uint64(mintable()) >= AllowancesStore(allowancesRef).totalAllowed(), \\\"Sold out\\\");\\r\\n        uint256 _endAt = end < AllowancesStore(allowancesRef).count() ? end : AllowancesStore(allowancesRef).count();\\r\\n        for (uint i = start; i < _endAt; i++) {\\r\\n            address recipient = AllowancesStore(allowancesRef).minters(i);\\r\\n            uint16 allowance = AllowancesStore(allowancesRef).allowances(recipient) - allowedMinters[recipient];\\r\\n            allowedMinters[recipient] += allowance; // consumes allowance\\r\\n            for (uint j = 0; j < allowance; j++) {\\r\\n                _mint(recipient, counter.current());\\r\\n                counter.increment();\\r\\n            }\\r\\n        }   \\r\\n        return counter.current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Private function to mint without any access checks.\\r\\n     * Called by the public edition minting functions.\\r\\n     */\\r\\n    function _mintEditions(address[] memory recipients) internal returns (uint256) {\\r\\n        require(uint64(mintable()) >= recipients.length, \\\"Sold out\\\");\\r\\n        for (uint i = 0; i < recipients.length; i++) {\\r\\n            _mint(recipients[i], counter.current());\\r\\n             counter.increment();\\r\\n        }\\r\\n        return counter.current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get URIs and hash for edition NFT\\r\\n     *\\r\\n     * @return contentUrl, contentHash\\r\\n     */\\r\\n    function getURI() public view returns (string memory, bytes32, string memory) {\\r\\n        return (contentUrl, contentHash, metadataUrl);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get URI for given token id\\r\\n     * \\r\\n     * @param tokenId token id to get uri for\\r\\n     * @return base64-encoded json metadata object\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"Edition doesn't exist\\\");\\r\\n        return string(abi.encodePacked(metadataUrl, \\\"?tokenId=\\\", StringsUpgradeable.toString(tokenId)));\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * ERC2981 - Gets royalty information for token\\r\\n     *\\r\\n     * @param _value the sale price for this token\\r\\n     */\\r\\n    function royaltyInfo(uint256, uint256 _value) external view override returns (address receiver, uint256 royaltyAmount) {\\r\\n        if (owner() == address(0x0)) {\\r\\n            return (owner(), 0);\\r\\n        }\\r\\n        return (owner(), (_value * royalties) / 10_000);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721Upgradeable, IERC165Upgradeable) returns (bool) {\\r\\n        return type(IERC2981Upgradeable).interfaceId == interfaceId || ERC721Upgradeable.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd57bbeabe1d3667d9cf51035397b92acff364fb9a18726d0c8dede9945922d32\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff16806200002c575060005460ff16155b620000945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000b7576000805461ffff19166101011790555b8015620000ca576000805461ff00191690555b50614f8780620000db6000396000f3fe6080604052600436106102c65760003560e01c806379847b9911610179578063b88d4fde116100d6578063ce7c2ac21161008a578063f053dc5c11610064578063f053dc5c146107fc578063f0553be714610823578063f2fde38b1461084357600080fd5b8063ce7c2ac214610755578063d7b97ef614610786578063e985e9c5146107a657600080fd5b8063c87b56dd116100bb578063c87b56dd14610700578063cd29c71a14610720578063ce513b6f1461073557600080fd5b8063b88d4fde146106ad578063bfd2385e146106cd57600080fd5b8063949d225d1161012d5780639b8581d0116101125780639b8581d014610657578063a035b1fe14610677578063a22cb4651461068d57600080fd5b8063949d225d1461060857806395d89b411461064257600080fd5b8063850710c31161015e578063850710c3146105be5780638da5cb5b146105d357806391b7f5ed146105e857600080fd5b806379847b991461056e578063825f98d4146105a957600080fd5b806342842e0e1161022757806364edfbf0116101db57806370a08231116101c057806370a0823114610515578063715018a6146105355780637754305c1461054a57600080fd5b806364edfbf0146104ed5780636f243a9c146104f557600080fd5b80634bf365df1161020c5780634bf365df146104a25780636352211e146104b7578063646c2e33146104d757600080fd5b806342842e0e1461046257806342966c681461048257600080fd5b806318160ddd1161027e57806323b872dd1161026357806323b872dd146103e15780632a55205a146104015780633ccfd60b1461044d57600080fd5b806318160ddd146103ac57806318f0043f146103c157600080fd5b8063081812fc116102af578063081812fc14610322578063095ea7b3146103675780631249c58b1461038957600080fd5b806301ffc9a7146102cb57806306fdde0314610300575b600080fd5b3480156102d757600080fd5b506102eb6102e63660046143a5565b610863565b60405190151581526020015b60405180910390f35b34801561030c57600080fd5b506103156108bf565b6040516102f79190614438565b34801561032e57600080fd5b5061034261033d36600461444b565b610951565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102f7565b34801561037357600080fd5b50610387610382366004614496565b610a30565b005b34801561039557600080fd5b5061039e610bbd565b6040519081526020016102f7565b3480156103b857600080fd5b5061039e610d01565b3480156103cd57600080fd5b506103876103dc366004614723565b610d1d565b3480156103ed57600080fd5b506103876103fc366004614879565b61123c565b34801561040d57600080fd5b5061042161041c3660046148ba565b6112de565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016102f7565b34801561045957600080fd5b50610387611358565b34801561046e57600080fd5b5061038761047d366004614879565b611363565b34801561048e57600080fd5b5061038761049d36600461444b565b61137e565b3480156104ae57600080fd5b5061039e6113f9565b3480156104c357600080fd5b506103426104d236600461444b565b611451565b3480156104e357600080fd5b5061039e60cb5481565b61039e611503565b34801561050157600080fd5b5061039e6105103660046148ba565b61167b565b34801561052157600080fd5b5061039e6105303660046148dc565b611b3f565b34801561054157600080fd5b50610387611c0d565b34801561055657600080fd5b5061055f611d11565b6040516102f7939291906148f9565b34801561057a57600080fd5b5060cd54610342906a0100000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156105b557600080fd5b50610387611e41565b3480156105ca57600080fd5b50610315611e9d565b3480156105df57600080fd5b50610342611f2b565b3480156105f457600080fd5b5061038761060336600461444b565b611f4c565b34801561061457600080fd5b5060cd546106299067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016102f7565b34801561064e57600080fd5b5061031561200d565b34801561066357600080fd5b5061038761067236600461493e565b61201c565b34801561068357600080fd5b5061039e60cf5481565b34801561069957600080fd5b506103876106a8366004614959565b61210e565b3480156106b957600080fd5b506103876106c836600461498e565b61211d565b3480156106d957600080fd5b506106ed6106e83660046148dc565b6121c5565b60405161ffff90911681526020016102f7565b34801561070c57600080fd5b5061031561071b36600461444b565b6122e8565b34801561072c57600080fd5b506103156123a8565b34801561074157600080fd5b5061039e6107503660046148dc565b6123b5565b34801561076157600080fd5b506106ed6107703660046148dc565b60d16020526000908152604090205461ffff1681565b34801561079257600080fd5b5061039e6107a1366004614a0e565b612429565b3480156107b257600080fd5b506102eb6107c1366004614aa8565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152606a6020908152604080832093909416825291909152205460ff1690565b34801561080857600080fd5b5060cd546106ed9068010000000000000000900461ffff1681565b34801561082f57600080fd5b5061038761083e366004614ae1565b61250c565b34801561084f57600080fd5b5061038761085e3660046148dc565b612624565b60007f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806108b957506108b982612842565b92915050565b6060606580546108ce90614b45565b80601f01602080910402602001604051908101604052809291908181526020018280546108fa90614b45565b80156109475780601f1061091c57610100808354040283529160200191610947565b820191906000526020600020905b81548152906001019060200180831161092a57829003601f168201915b5050505050905090565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16610a07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526069602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610a3b82611451565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610af9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016109fe565b3373ffffffffffffffffffffffffffffffffffffffff82161480610b225750610b2281336107c1565b610bae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109fe565b610bb88383612925565b505050565b6000610bc960016129c5565b610c2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d696e74696e67206e6f7420616c6c6f7765640000000000000000000000000060448201526064016109fe565b604080516001808252818301909252600091602080830190803683370190505090503381600081518110610c6557610c65614b99565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015233610c93611f2b565b73ffffffffffffffffffffffffffffffffffffffff1614158015610ce357506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff16155b15610cf257610cf26001612b02565b610cfb81612b42565b91505090565b60006001610d0e60c95490565b610d189190614bf7565b905090565b600054610100900460ff1680610d36575060005460ff16155b610dc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109fe565b600054610100900460ff16158015610e0157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610e1387600001518860200151612c1b565b610e1b612d4c565b610e2488612624565b600087604001515111610e93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f456d70747920636f6e74656e742055524c00000000000000000000000000000060448201526064016109fe565b60408701518051610eac9160ca916020909101906142de565b50606087015160cb55608087015151610f21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f456d707479206d657461646174612055524c000000000000000000000000000060448201526064016109fe565b60808701518051610f3a9160cc916020909101906142de565b5060cd80547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff881617905560cf85905573ffffffffffffffffffffffffffffffffffffffff8216610ff1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416c6c6f77616e6365733a20696e76616c6964207265666572656e636500000060448201526064016109fe565b60cd80547fffff0000000000000000000000000000000000000000ffffffffffffffffffff166a010000000000000000000073ffffffffffffffffffffffffffffffffffffffff85160217905560c9805460010190556127108461ffff16106110b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f526f79616c7469657320746f6f2068696768000000000000000000000000000060448201526064016109fe565b60cd80547fffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffff166801000000000000000061ffff8716021790556000805b845181101561117d5761114085828151811061111157611111614b99565b60200260200101516000015186838151811061112f5761112f614b99565b602002602001015160200151612e71565b84818151811061115257611152614b99565b602002602001015160200151826111699190614c0e565b91508061117581614c34565b9150506110f3565b506127108161ffff16106111ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f53686172657320746f6f2068696768000000000000000000000000000000000060448201526064016109fe565b611202896111fd83612710614c6d565b612e71565b50801561123257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050505050565b611247335b826130af565b6112d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109fe565b610bb883838361321b565b600080806112ea611f2b565b73ffffffffffffffffffffffffffffffffffffffff1614156113195761130e611f2b565b600091509150611351565b611321611f2b565b60cd54612710906113429068010000000000000000900461ffff1686614c90565b61134c9190614cfc565b915091505b9250929050565b61136133613482565b565b610bb88383836040518060200160405280600081525061211d565b61138733611241565b6113ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420617070726f766564000000000000000000000000000000000000000060448201526064016109fe565b6113f68161363c565b50565b600061140460c95490565b60cd5467ffffffffffffffff16156114335760cd5461142e9067ffffffffffffffff166001614d10565b61143d565b67ffffffffffffffff5b67ffffffffffffffff16610d189190614bf7565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16806108b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016109fe565b60008060cf5411611570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420666f722073616c65000000000000000000000000000000000000000060448201526064016109fe565b60cf5434146115db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f57726f6e6720707269636500000000000000000000000000000000000000000060448201526064016109fe565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061161157611611614b99565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910182015260cf546040805191825233928201929092527f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a1610cfb81612b42565b600060cd600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166390e3b35c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e557600080fd5b505afa1580156116f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171d9190614d33565b67ffffffffffffffff1661172f6113f9565b67ffffffffffffffff1610156117a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f536f6c64206f757400000000000000000000000000000000000000000000000060448201526064016109fe565b600060cd600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306661abd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561180b57600080fd5b505afa15801561181f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118439190614d50565b83106118ee5760cd600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306661abd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b157600080fd5b505afa1580156118c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e99190614d50565b6118f0565b825b9050835b81811015611b325760cd546040517f8623ec7b000000000000000000000000000000000000000000000000000000008152600481018390526000916a0100000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1690638623ec7b9060240160206040518083038186803b15801561197557600080fd5b505afa158015611989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ad9190614d69565b73ffffffffffffffffffffffffffffffffffffffff818116600081815260ce60205260408082205460cd5491517f2b603c710000000000000000000000000000000000000000000000000000000081526004810194909452949550909361ffff16926a01000000000000000000009091041690632b603c719060240160206040518083038186803b158015611a4157600080fd5b505afa158015611a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a799190614d86565b611a839190614c6d565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260ce6020526040812080549293508392909190611ac190849061ffff16614c0e565b92506101000a81548161ffff021916908361ffff16021790555060005b8161ffff16811015611b1c57611afc83611af760c95490565b613709565b611b0a60c980546001019055565b80611b1481614c34565b915050611ade565b5050508080611b2a90614c34565b9150506118f4565b5060c9545b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8216611be4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016109fe565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526068602052604090205490565b33611c16611f2b565b73ffffffffffffffffffffffffffffffffffffffff1614611c93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109fe565b47158015611ca1575060cf54155b611d07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f506f74656e7469616c206c6f7373206f662066756e647300000000000000000060448201526064016109fe565b61136160006138cb565b60606000606060ca60cb5460cc828054611d2a90614b45565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5690614b45565b8015611da35780601f10611d7857610100808354040283529160200191611da3565b820191906000526020600020905b815481529060010190602001808311611d8657829003601f168201915b50505050509250808054611db690614b45565b80601f0160208091040260200160405190810160405280929190818152602001828054611de290614b45565b8015611e2f5780601f10611e0457610100808354040283529160200191611e2f565b820191906000526020600020905b815481529060010190602001808311611e1257829003601f168201915b50505050509050925092509250909192565b60005b60d0548110156113f657611e8b60d08281548110611e6457611e64614b99565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16613482565b80611e9581614c34565b915050611e44565b60ca8054611eaa90614b45565b80601f0160208091040260200160405190810160405280929190818152602001828054611ed690614b45565b8015611f235780601f10611ef857610100808354040283529160200191611f23565b820191906000526020600020905b815481529060010190602001808311611f0657829003601f168201915b505050505081565b6000610d1860975473ffffffffffffffffffffffffffffffffffffffff1690565b33611f55611f2b565b73ffffffffffffffffffffffffffffffffffffffff1614611fd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109fe565b60cf8190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6229060200160405180910390a150565b6060606680546108ce90614b45565b33612025611f2b565b73ffffffffffffffffffffffffffffffffffffffff16146120a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109fe565b806120ae5760006120b1565b60015b6000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660ff9290921691909117905550565b612119338383613942565b5050565b61212733836130af565b6121b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109fe565b6121bf84848484613a70565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff82166122165750506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff1690565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260ce6020526040908190205460cd5491517f2b603c71000000000000000000000000000000000000000000000000000000008152600481019390935261ffff16926a01000000000000000000009091041690632b603c719060240160206040518083038186803b1580156122a657600080fd5b505afa1580156122ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122de9190614d86565b6108b99190614c6d565b60008181526067602052604090205460609073ffffffffffffffffffffffffffffffffffffffff16612376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f45646974696f6e20646f65736e2774206578697374000000000000000000000060448201526064016109fe565b60cc61238183613b13565b604051602001612392929190614dbf565b6040516020818303038152906040529050919050565b60cc8054611eaa90614b45565b60008060d254476123c69190614ec9565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260d3602090815260408083205460d190925290912054919250906127109061240e9061ffff1684614c90565b6124189190614cfc565b6124229190614bf7565b9392505050565b600061243582516129c5565b61249b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d696e74696e67206e6f7420616c6c6f776564206f7220657863656564696e6760448201526064016109fe565b336124a4611f2b565b73ffffffffffffffffffffffffffffffffffffffff16141580156124f457506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff16155b15612503576125038251612b02565b6108b982612b42565b33612515611f2b565b73ffffffffffffffffffffffffffffffffffffffff1614612592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109fe565b60008251116125fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f456d70747920636f6e74656e742055524c00000000000000000000000000000060448201526064016109fe565b81516126109060ca9060208501906142de565b508051610bb89060cc9060208401906142de565b3361262d611f2b565b73ffffffffffffffffffffffffffffffffffffffff16146126aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109fe565b73ffffffffffffffffffffffffffffffffffffffff8116612727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6577206f776e657220697320746865207a65726f206164647265737300000060448201526064016109fe565b60d16000612733611f2b565b73ffffffffffffffffffffffffffffffffffffffff90811682526020808301939093526040918201600090812054918516815260d190935291205461277f9161ffff9081169116614c0e565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d160208190526040822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff949094169390931790925590816127e2611f2b565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff929092169190911790556113f6816138cb565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806128d557507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108b957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146108b9565b600081815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155819061297f82611451565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000336129d0611f2b565b73ffffffffffffffffffffffffffffffffffffffff161480612a1f57506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff1615155b806108b9575060cd546040517f2b603c710000000000000000000000000000000000000000000000000000000081523360048201526a010000000000000000000090910473ffffffffffffffffffffffffffffffffffffffff1690632b603c719060240160206040518083038186803b158015612a9b57600080fd5b505afa158015612aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad39190614d86565b33600090815260ce602052604090205461ffff91821691612af691859116614c0e565b61ffff16111592915050565b33600090815260ce602052604081208054839290612b2590849061ffff16614c0e565b92506101000a81548161ffff021916908361ffff16021790555050565b60008151612b4e6113f9565b67ffffffffffffffff161015612bc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f536f6c64206f757400000000000000000000000000000000000000000000000060448201526064016109fe565b60005b8251811015612c1257612bf2838281518110612be157612be1614b99565b6020026020010151611af760c95490565b612c0060c980546001019055565b80612c0a81614c34565b915050612bc3565b5060c9546108b9565b600054610100900460ff1680612c34575060005460ff16155b612cc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109fe565b600054610100900460ff16158015612cff57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612d07613c45565b612d0f613c45565b612d198383613d59565b8015610bb857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b600054610100900460ff1680612d65575060005460ff16155b612df1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109fe565b600054610100900460ff16158015612e3057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612e38613c45565b612e40613e98565b80156113f657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b73ffffffffffffffffffffffffffffffffffffffff8216612eee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5368617265686f6c646572206973207a65726f2061646472657373000000000060448201526064016109fe565b60008161ffff16118015612f0857506127108161ffff1611155b612f6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5368617265732061726520696e76616c6964000000000000000000000000000060448201526064016109fe565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d1602052604090205461ffff1615612fff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5368617265686f6c64657220616c72656164792068617320736861726573000060448201526064016109fe565b60d08054600181019091557fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff939093169283179055600091825260d1602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16613160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084016109fe565b600061316b83611451565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806131da57508373ffffffffffffffffffffffffffffffffffffffff166131c284610951565b73ffffffffffffffffffffffffffffffffffffffff16145b80611b37575073ffffffffffffffffffffffffffffffffffffffff8082166000908152606a602090815260408083209388168352929052205460ff16611b37565b8273ffffffffffffffffffffffffffffffffffffffff1661323b82611451565b73ffffffffffffffffffffffffffffffffffffffff16146132de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016109fe565b73ffffffffffffffffffffffffffffffffffffffff8216613380576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016109fe565b61338b600082612925565b73ffffffffffffffffffffffffffffffffffffffff831660009081526068602052604081208054600192906133c1908490614bf7565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604081208054600192906133fc908490614ec9565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6040517fce513b6f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152600090309063ce513b6f9060240160206040518083038186803b1580156134ea57600080fd5b505afa1580156134fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135229190614d50565b90508061358b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4163636f756e74206973206e6f7420647565207061796d656e7400000000000060448201526064016109fe565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d36020526040812080548392906135c0908490614ec9565b925050819055508060d260008282546135d99190614ec9565b909155506135e990508282613f85565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527fc271d5cc8e899d2f13fb92ceb234c8beb4f1b82ebee351bd4fd728a79773e12b910160405180910390a15050565b600061364782611451565b9050613654600083612925565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260686020526040812080546001929061368a908490614bf7565b909155505060008281526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b73ffffffffffffffffffffffffffffffffffffffff8216613786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109fe565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff1615613812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109fe565b73ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260408120805460019290613848908490614ec9565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6097805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156139d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109fe565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152606a602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613a7b84848461321b565b613a87848484846140df565b6121bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109fe565b606081613b5357505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115613b7d5780613b6781614c34565b9150613b769050600a83614cfc565b9150613b57565b60008167ffffffffffffffff811115613b9857613b986144c2565b6040519080825280601f01601f191660200182016040528015613bc2576020820181803683370190505b5090505b8415611b3757613bd7600183614bf7565b9150613be4600a86614ee1565b613bef906030614ec9565b60f81b818381518110613c0457613c04614b99565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613c3e600a86614cfc565b9450613bc6565b600054610100900460ff1680613c5e575060005460ff16155b613cea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109fe565b600054610100900460ff16158015612e4057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661010117905580156113f657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff1680613d72575060005460ff16155b613dfe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109fe565b600054610100900460ff16158015613e3d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b8251613e509060659060208601906142de565b508151613e649060669060208501906142de565b508015610bb857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b600054610100900460ff1680613eb1575060005460ff16155b613f3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109fe565b600054610100900460ff16158015613f7c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612e40336138cb565b80471015613fef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016109fe565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114614049576040519150601f19603f3d011682016040523d82523d6000602084013e61404e565b606091505b5050905080610bb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016109fe565b600073ffffffffffffffffffffffffffffffffffffffff84163b156142d3576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290614156903390899088908890600401614ef5565b602060405180830381600087803b15801561417057600080fd5b505af19250505080156141be575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526141bb91810190614f34565b60015b614288573d8080156141ec576040519150601f19603f3d011682016040523d82523d6000602084013e6141f1565b606091505b508051614280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109fe565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611b37565b506001949350505050565b8280546142ea90614b45565b90600052602060002090601f01602090048101928261430c5760008555614352565b82601f1061432557805160ff1916838001178555614352565b82800160010185558215614352579182015b82811115614352578251825591602001919060010190614337565b5061435e929150614362565b5090565b5b8082111561435e5760008155600101614363565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146113f657600080fd5b6000602082840312156143b757600080fd5b813561242281614377565b60005b838110156143dd5781810151838201526020016143c5565b838111156121bf5750506000910152565b600081518084526144068160208601602086016143c2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061242260208301846143ee565b60006020828403121561445d57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146113f657600080fd5b803561449181614464565b919050565b600080604083850312156144a957600080fd5b82356144b481614464565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715614514576145146144c2565b60405290565b60405160a0810167ffffffffffffffff81118282101715614514576145146144c2565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614584576145846144c2565b604052919050565b600067ffffffffffffffff8311156145a6576145a66144c2565b6145d760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160161453d565b90508281528383830111156145eb57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261461357600080fd5b6124228383356020850161458c565b67ffffffffffffffff811681146113f657600080fd5b803561449181614622565b61ffff811681146113f657600080fd5b803561449181614643565b600067ffffffffffffffff821115614678576146786144c2565b5060051b60200190565b600082601f83011261469357600080fd5b813560206146a86146a38361465e565b61453d565b82815260069290921b840181019181810190868411156146c757600080fd5b8286015b8481101561471857604081890312156146e45760008081fd5b6146ec6144f1565b81356146f781614464565b81528185013561470681614643565b818601528352918301916040016146cb565b509695505050505050565b600080600080600080600060e0888a03121561473e57600080fd5b873561474981614464565b9650602088013567ffffffffffffffff8082111561476657600080fd5b9089019060a0828c03121561477a57600080fd5b61478261451a565b82358281111561479157600080fd5b61479d8d828601614602565b8252506020830135828111156147b257600080fd5b6147be8d828601614602565b6020830152506040830135828111156147d657600080fd5b6147e28d828601614602565b6040830152506060830135606082015260808301358281111561480457600080fd5b6148108d828601614602565b608083015250975061482460408b01614638565b965060608a0135955061483960808b01614653565b945060a08a013591508082111561484f57600080fd5b5061485c8a828b01614682565b92505061486b60c08901614486565b905092959891949750929550565b60008060006060848603121561488e57600080fd5b833561489981614464565b925060208401356148a981614464565b929592945050506040919091013590565b600080604083850312156148cd57600080fd5b50508035926020909101359150565b6000602082840312156148ee57600080fd5b813561242281614464565b60608152600061490c60608301866143ee565b846020840152828103604084015261492481856143ee565b9695505050505050565b8035801515811461449157600080fd5b60006020828403121561495057600080fd5b6124228261492e565b6000806040838503121561496c57600080fd5b823561497781614464565b91506149856020840161492e565b90509250929050565b600080600080608085870312156149a457600080fd5b84356149af81614464565b935060208501356149bf81614464565b925060408501359150606085013567ffffffffffffffff8111156149e257600080fd5b8501601f810187136149f357600080fd5b614a028782356020840161458c565b91505092959194509250565b60006020808385031215614a2157600080fd5b823567ffffffffffffffff811115614a3857600080fd5b8301601f81018513614a4957600080fd5b8035614a576146a38261465e565b81815260059190911b82018301908381019087831115614a7657600080fd5b928401925b82841015614a9d578335614a8e81614464565b82529284019290840190614a7b565b979650505050505050565b60008060408385031215614abb57600080fd5b8235614ac681614464565b91506020830135614ad681614464565b809150509250929050565b60008060408385031215614af457600080fd5b823567ffffffffffffffff80821115614b0c57600080fd5b614b1886838701614602565b93506020850135915080821115614b2e57600080fd5b50614b3b85828601614602565b9150509250929050565b600181811c90821680614b5957607f821691505b60208210811415614b93577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015614c0957614c09614bc8565b500390565b600061ffff808316818516808303821115614c2b57614c2b614bc8565b01949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c6657614c66614bc8565b5060010190565b600061ffff83811690831681811015614c8857614c88614bc8565b039392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614cc857614cc8614bc8565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614d0b57614d0b614ccd565b500490565b600067ffffffffffffffff808316818516808303821115614c2b57614c2b614bc8565b600060208284031215614d4557600080fd5b815161242281614622565b600060208284031215614d6257600080fd5b5051919050565b600060208284031215614d7b57600080fd5b815161242281614464565b600060208284031215614d9857600080fd5b815161242281614643565b60008151614db58185602086016143c2565b9290920192915050565b600080845481600182811c915080831680614ddb57607f831692505b6020808410821415614e14577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b818015614e285760018114614e5757614e84565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650614e84565b60008b81526020902060005b86811015614e7c5781548b820152908501908301614e63565b505084890196505b505050505050614ec0614eba827f3f746f6b656e49643d0000000000000000000000000000000000000000000000815260090190565b85614da3565b95945050505050565b60008219821115614edc57614edc614bc8565b500190565b600082614ef057614ef0614ccd565b500690565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152508360408301526080606083015261492460808301846143ee565b600060208284031215614f4657600080fd5b81516124228161437756fea2646970667358221220d073d01b8710e2ae7dff3b958ca47cb6a6bc2b2b46274aedbf10f914b43a993064736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102c65760003560e01c806379847b9911610179578063b88d4fde116100d6578063ce7c2ac21161008a578063f053dc5c11610064578063f053dc5c146107fc578063f0553be714610823578063f2fde38b1461084357600080fd5b8063ce7c2ac214610755578063d7b97ef614610786578063e985e9c5146107a657600080fd5b8063c87b56dd116100bb578063c87b56dd14610700578063cd29c71a14610720578063ce513b6f1461073557600080fd5b8063b88d4fde146106ad578063bfd2385e146106cd57600080fd5b8063949d225d1161012d5780639b8581d0116101125780639b8581d014610657578063a035b1fe14610677578063a22cb4651461068d57600080fd5b8063949d225d1461060857806395d89b411461064257600080fd5b8063850710c31161015e578063850710c3146105be5780638da5cb5b146105d357806391b7f5ed146105e857600080fd5b806379847b991461056e578063825f98d4146105a957600080fd5b806342842e0e1161022757806364edfbf0116101db57806370a08231116101c057806370a0823114610515578063715018a6146105355780637754305c1461054a57600080fd5b806364edfbf0146104ed5780636f243a9c146104f557600080fd5b80634bf365df1161020c5780634bf365df146104a25780636352211e146104b7578063646c2e33146104d757600080fd5b806342842e0e1461046257806342966c681461048257600080fd5b806318160ddd1161027e57806323b872dd1161026357806323b872dd146103e15780632a55205a146104015780633ccfd60b1461044d57600080fd5b806318160ddd146103ac57806318f0043f146103c157600080fd5b8063081812fc116102af578063081812fc14610322578063095ea7b3146103675780631249c58b1461038957600080fd5b806301ffc9a7146102cb57806306fdde0314610300575b600080fd5b3480156102d757600080fd5b506102eb6102e63660046143a5565b610863565b60405190151581526020015b60405180910390f35b34801561030c57600080fd5b506103156108bf565b6040516102f79190614438565b34801561032e57600080fd5b5061034261033d36600461444b565b610951565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102f7565b34801561037357600080fd5b50610387610382366004614496565b610a30565b005b34801561039557600080fd5b5061039e610bbd565b6040519081526020016102f7565b3480156103b857600080fd5b5061039e610d01565b3480156103cd57600080fd5b506103876103dc366004614723565b610d1d565b3480156103ed57600080fd5b506103876103fc366004614879565b61123c565b34801561040d57600080fd5b5061042161041c3660046148ba565b6112de565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016102f7565b34801561045957600080fd5b50610387611358565b34801561046e57600080fd5b5061038761047d366004614879565b611363565b34801561048e57600080fd5b5061038761049d36600461444b565b61137e565b3480156104ae57600080fd5b5061039e6113f9565b3480156104c357600080fd5b506103426104d236600461444b565b611451565b3480156104e357600080fd5b5061039e60cb5481565b61039e611503565b34801561050157600080fd5b5061039e6105103660046148ba565b61167b565b34801561052157600080fd5b5061039e6105303660046148dc565b611b3f565b34801561054157600080fd5b50610387611c0d565b34801561055657600080fd5b5061055f611d11565b6040516102f7939291906148f9565b34801561057a57600080fd5b5060cd54610342906a0100000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156105b557600080fd5b50610387611e41565b3480156105ca57600080fd5b50610315611e9d565b3480156105df57600080fd5b50610342611f2b565b3480156105f457600080fd5b5061038761060336600461444b565b611f4c565b34801561061457600080fd5b5060cd546106299067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016102f7565b34801561064e57600080fd5b5061031561200d565b34801561066357600080fd5b5061038761067236600461493e565b61201c565b34801561068357600080fd5b5061039e60cf5481565b34801561069957600080fd5b506103876106a8366004614959565b61210e565b3480156106b957600080fd5b506103876106c836600461498e565b61211d565b3480156106d957600080fd5b506106ed6106e83660046148dc565b6121c5565b60405161ffff90911681526020016102f7565b34801561070c57600080fd5b5061031561071b36600461444b565b6122e8565b34801561072c57600080fd5b506103156123a8565b34801561074157600080fd5b5061039e6107503660046148dc565b6123b5565b34801561076157600080fd5b506106ed6107703660046148dc565b60d16020526000908152604090205461ffff1681565b34801561079257600080fd5b5061039e6107a1366004614a0e565b612429565b3480156107b257600080fd5b506102eb6107c1366004614aa8565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152606a6020908152604080832093909416825291909152205460ff1690565b34801561080857600080fd5b5060cd546106ed9068010000000000000000900461ffff1681565b34801561082f57600080fd5b5061038761083e366004614ae1565b61250c565b34801561084f57600080fd5b5061038761085e3660046148dc565b612624565b60007f2a55205a000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806108b957506108b982612842565b92915050565b6060606580546108ce90614b45565b80601f01602080910402602001604051908101604052809291908181526020018280546108fa90614b45565b80156109475780601f1061091c57610100808354040283529160200191610947565b820191906000526020600020905b81548152906001019060200180831161092a57829003601f168201915b5050505050905090565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16610a07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526069602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610a3b82611451565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610af9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016109fe565b3373ffffffffffffffffffffffffffffffffffffffff82161480610b225750610b2281336107c1565b610bae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109fe565b610bb88383612925565b505050565b6000610bc960016129c5565b610c2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d696e74696e67206e6f7420616c6c6f7765640000000000000000000000000060448201526064016109fe565b604080516001808252818301909252600091602080830190803683370190505090503381600081518110610c6557610c65614b99565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015233610c93611f2b565b73ffffffffffffffffffffffffffffffffffffffff1614158015610ce357506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff16155b15610cf257610cf26001612b02565b610cfb81612b42565b91505090565b60006001610d0e60c95490565b610d189190614bf7565b905090565b600054610100900460ff1680610d36575060005460ff16155b610dc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109fe565b600054610100900460ff16158015610e0157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610e1387600001518860200151612c1b565b610e1b612d4c565b610e2488612624565b600087604001515111610e93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f456d70747920636f6e74656e742055524c00000000000000000000000000000060448201526064016109fe565b60408701518051610eac9160ca916020909101906142de565b50606087015160cb55608087015151610f21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f456d707479206d657461646174612055524c000000000000000000000000000060448201526064016109fe565b60808701518051610f3a9160cc916020909101906142de565b5060cd80547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff881617905560cf85905573ffffffffffffffffffffffffffffffffffffffff8216610ff1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416c6c6f77616e6365733a20696e76616c6964207265666572656e636500000060448201526064016109fe565b60cd80547fffff0000000000000000000000000000000000000000ffffffffffffffffffff166a010000000000000000000073ffffffffffffffffffffffffffffffffffffffff85160217905560c9805460010190556127108461ffff16106110b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f526f79616c7469657320746f6f2068696768000000000000000000000000000060448201526064016109fe565b60cd80547fffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffff166801000000000000000061ffff8716021790556000805b845181101561117d5761114085828151811061111157611111614b99565b60200260200101516000015186838151811061112f5761112f614b99565b602002602001015160200151612e71565b84818151811061115257611152614b99565b602002602001015160200151826111699190614c0e565b91508061117581614c34565b9150506110f3565b506127108161ffff16106111ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f53686172657320746f6f2068696768000000000000000000000000000000000060448201526064016109fe565b611202896111fd83612710614c6d565b612e71565b50801561123257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050505050565b611247335b826130af565b6112d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109fe565b610bb883838361321b565b600080806112ea611f2b565b73ffffffffffffffffffffffffffffffffffffffff1614156113195761130e611f2b565b600091509150611351565b611321611f2b565b60cd54612710906113429068010000000000000000900461ffff1686614c90565b61134c9190614cfc565b915091505b9250929050565b61136133613482565b565b610bb88383836040518060200160405280600081525061211d565b61138733611241565b6113ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420617070726f766564000000000000000000000000000000000000000060448201526064016109fe565b6113f68161363c565b50565b600061140460c95490565b60cd5467ffffffffffffffff16156114335760cd5461142e9067ffffffffffffffff166001614d10565b61143d565b67ffffffffffffffff5b67ffffffffffffffff16610d189190614bf7565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16806108b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016109fe565b60008060cf5411611570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420666f722073616c65000000000000000000000000000000000000000060448201526064016109fe565b60cf5434146115db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f57726f6e6720707269636500000000000000000000000000000000000000000060448201526064016109fe565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061161157611611614b99565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910182015260cf546040805191825233928201929092527f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa910160405180910390a1610cfb81612b42565b600060cd600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166390e3b35c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e557600080fd5b505afa1580156116f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171d9190614d33565b67ffffffffffffffff1661172f6113f9565b67ffffffffffffffff1610156117a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f536f6c64206f757400000000000000000000000000000000000000000000000060448201526064016109fe565b600060cd600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306661abd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561180b57600080fd5b505afa15801561181f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118439190614d50565b83106118ee5760cd600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306661abd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b157600080fd5b505afa1580156118c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e99190614d50565b6118f0565b825b9050835b81811015611b325760cd546040517f8623ec7b000000000000000000000000000000000000000000000000000000008152600481018390526000916a0100000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1690638623ec7b9060240160206040518083038186803b15801561197557600080fd5b505afa158015611989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ad9190614d69565b73ffffffffffffffffffffffffffffffffffffffff818116600081815260ce60205260408082205460cd5491517f2b603c710000000000000000000000000000000000000000000000000000000081526004810194909452949550909361ffff16926a01000000000000000000009091041690632b603c719060240160206040518083038186803b158015611a4157600080fd5b505afa158015611a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a799190614d86565b611a839190614c6d565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260ce6020526040812080549293508392909190611ac190849061ffff16614c0e565b92506101000a81548161ffff021916908361ffff16021790555060005b8161ffff16811015611b1c57611afc83611af760c95490565b613709565b611b0a60c980546001019055565b80611b1481614c34565b915050611ade565b5050508080611b2a90614c34565b9150506118f4565b5060c9545b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8216611be4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016109fe565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526068602052604090205490565b33611c16611f2b565b73ffffffffffffffffffffffffffffffffffffffff1614611c93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109fe565b47158015611ca1575060cf54155b611d07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f506f74656e7469616c206c6f7373206f662066756e647300000000000000000060448201526064016109fe565b61136160006138cb565b60606000606060ca60cb5460cc828054611d2a90614b45565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5690614b45565b8015611da35780601f10611d7857610100808354040283529160200191611da3565b820191906000526020600020905b815481529060010190602001808311611d8657829003601f168201915b50505050509250808054611db690614b45565b80601f0160208091040260200160405190810160405280929190818152602001828054611de290614b45565b8015611e2f5780601f10611e0457610100808354040283529160200191611e2f565b820191906000526020600020905b815481529060010190602001808311611e1257829003601f168201915b50505050509050925092509250909192565b60005b60d0548110156113f657611e8b60d08281548110611e6457611e64614b99565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16613482565b80611e9581614c34565b915050611e44565b60ca8054611eaa90614b45565b80601f0160208091040260200160405190810160405280929190818152602001828054611ed690614b45565b8015611f235780601f10611ef857610100808354040283529160200191611f23565b820191906000526020600020905b815481529060010190602001808311611f0657829003601f168201915b505050505081565b6000610d1860975473ffffffffffffffffffffffffffffffffffffffff1690565b33611f55611f2b565b73ffffffffffffffffffffffffffffffffffffffff1614611fd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109fe565b60cf8190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d6229060200160405180910390a150565b6060606680546108ce90614b45565b33612025611f2b565b73ffffffffffffffffffffffffffffffffffffffff16146120a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109fe565b806120ae5760006120b1565b60015b6000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001660ff9290921691909117905550565b612119338383613942565b5050565b61212733836130af565b6121b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109fe565b6121bf84848484613a70565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff82166122165750506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff1690565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260ce6020526040908190205460cd5491517f2b603c71000000000000000000000000000000000000000000000000000000008152600481019390935261ffff16926a01000000000000000000009091041690632b603c719060240160206040518083038186803b1580156122a657600080fd5b505afa1580156122ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122de9190614d86565b6108b99190614c6d565b60008181526067602052604090205460609073ffffffffffffffffffffffffffffffffffffffff16612376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f45646974696f6e20646f65736e2774206578697374000000000000000000000060448201526064016109fe565b60cc61238183613b13565b604051602001612392929190614dbf565b6040516020818303038152906040529050919050565b60cc8054611eaa90614b45565b60008060d254476123c69190614ec9565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260d3602090815260408083205460d190925290912054919250906127109061240e9061ffff1684614c90565b6124189190614cfc565b6124229190614bf7565b9392505050565b600061243582516129c5565b61249b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d696e74696e67206e6f7420616c6c6f776564206f7220657863656564696e6760448201526064016109fe565b336124a4611f2b565b73ffffffffffffffffffffffffffffffffffffffff16141580156124f457506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff16155b15612503576125038251612b02565b6108b982612b42565b33612515611f2b565b73ffffffffffffffffffffffffffffffffffffffff1614612592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109fe565b60008251116125fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f456d70747920636f6e74656e742055524c00000000000000000000000000000060448201526064016109fe565b81516126109060ca9060208501906142de565b508051610bb89060cc9060208401906142de565b3361262d611f2b565b73ffffffffffffffffffffffffffffffffffffffff16146126aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109fe565b73ffffffffffffffffffffffffffffffffffffffff8116612727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6577206f776e657220697320746865207a65726f206164647265737300000060448201526064016109fe565b60d16000612733611f2b565b73ffffffffffffffffffffffffffffffffffffffff90811682526020808301939093526040918201600090812054918516815260d190935291205461277f9161ffff9081169116614c0e565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d160208190526040822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff949094169390931790925590816127e2611f2b565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff929092169190911790556113f6816138cb565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806128d557507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806108b957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146108b9565b600081815260696020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155819061297f82611451565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000336129d0611f2b565b73ffffffffffffffffffffffffffffffffffffffff161480612a1f57506000805260ce6020527fd3f5862f6f80175da7514904f3a889cc3cc8c4f3af5129e28cdeaee2baa6efc45461ffff1615155b806108b9575060cd546040517f2b603c710000000000000000000000000000000000000000000000000000000081523360048201526a010000000000000000000090910473ffffffffffffffffffffffffffffffffffffffff1690632b603c719060240160206040518083038186803b158015612a9b57600080fd5b505afa158015612aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad39190614d86565b33600090815260ce602052604090205461ffff91821691612af691859116614c0e565b61ffff16111592915050565b33600090815260ce602052604081208054839290612b2590849061ffff16614c0e565b92506101000a81548161ffff021916908361ffff16021790555050565b60008151612b4e6113f9565b67ffffffffffffffff161015612bc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f536f6c64206f757400000000000000000000000000000000000000000000000060448201526064016109fe565b60005b8251811015612c1257612bf2838281518110612be157612be1614b99565b6020026020010151611af760c95490565b612c0060c980546001019055565b80612c0a81614c34565b915050612bc3565b5060c9546108b9565b600054610100900460ff1680612c34575060005460ff16155b612cc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109fe565b600054610100900460ff16158015612cff57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612d07613c45565b612d0f613c45565b612d198383613d59565b8015610bb857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b600054610100900460ff1680612d65575060005460ff16155b612df1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109fe565b600054610100900460ff16158015612e3057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612e38613c45565b612e40613e98565b80156113f657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b73ffffffffffffffffffffffffffffffffffffffff8216612eee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f5368617265686f6c646572206973207a65726f2061646472657373000000000060448201526064016109fe565b60008161ffff16118015612f0857506127108161ffff1611155b612f6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5368617265732061726520696e76616c6964000000000000000000000000000060448201526064016109fe565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d1602052604090205461ffff1615612fff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5368617265686f6c64657220616c72656164792068617320736861726573000060448201526064016109fe565b60d08054600181019091557fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff939093169283179055600091825260d1602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff909216919091179055565b60008181526067602052604081205473ffffffffffffffffffffffffffffffffffffffff16613160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084016109fe565b600061316b83611451565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806131da57508373ffffffffffffffffffffffffffffffffffffffff166131c284610951565b73ffffffffffffffffffffffffffffffffffffffff16145b80611b37575073ffffffffffffffffffffffffffffffffffffffff8082166000908152606a602090815260408083209388168352929052205460ff16611b37565b8273ffffffffffffffffffffffffffffffffffffffff1661323b82611451565b73ffffffffffffffffffffffffffffffffffffffff16146132de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016109fe565b73ffffffffffffffffffffffffffffffffffffffff8216613380576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016109fe565b61338b600082612925565b73ffffffffffffffffffffffffffffffffffffffff831660009081526068602052604081208054600192906133c1908490614bf7565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526068602052604081208054600192906133fc908490614ec9565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6040517fce513b6f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152600090309063ce513b6f9060240160206040518083038186803b1580156134ea57600080fd5b505afa1580156134fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135229190614d50565b90508061358b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4163636f756e74206973206e6f7420647565207061796d656e7400000000000060448201526064016109fe565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260d36020526040812080548392906135c0908490614ec9565b925050819055508060d260008282546135d99190614ec9565b909155506135e990508282613f85565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527fc271d5cc8e899d2f13fb92ceb234c8beb4f1b82ebee351bd4fd728a79773e12b910160405180910390a15050565b600061364782611451565b9050613654600083612925565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260686020526040812080546001929061368a908490614bf7565b909155505060008281526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b73ffffffffffffffffffffffffffffffffffffffff8216613786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109fe565b60008181526067602052604090205473ffffffffffffffffffffffffffffffffffffffff1615613812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109fe565b73ffffffffffffffffffffffffffffffffffffffff82166000908152606860205260408120805460019290613848908490614ec9565b909155505060008181526067602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6097805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156139d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109fe565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152606a602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613a7b84848461321b565b613a87848484846140df565b6121bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109fe565b606081613b5357505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115613b7d5780613b6781614c34565b9150613b769050600a83614cfc565b9150613b57565b60008167ffffffffffffffff811115613b9857613b986144c2565b6040519080825280601f01601f191660200182016040528015613bc2576020820181803683370190505b5090505b8415611b3757613bd7600183614bf7565b9150613be4600a86614ee1565b613bef906030614ec9565b60f81b818381518110613c0457613c04614b99565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613c3e600a86614cfc565b9450613bc6565b600054610100900460ff1680613c5e575060005460ff16155b613cea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109fe565b600054610100900460ff16158015612e4057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661010117905580156113f657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600054610100900460ff1680613d72575060005460ff16155b613dfe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109fe565b600054610100900460ff16158015613e3d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b8251613e509060659060208601906142de565b508151613e649060669060208501906142de565b508015610bb857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b600054610100900460ff1680613eb1575060005460ff16155b613f3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109fe565b600054610100900460ff16158015613f7c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b612e40336138cb565b80471015613fef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016109fe565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114614049576040519150601f19603f3d011682016040523d82523d6000602084013e61404e565b606091505b5050905080610bb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016109fe565b600073ffffffffffffffffffffffffffffffffffffffff84163b156142d3576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a0290614156903390899088908890600401614ef5565b602060405180830381600087803b15801561417057600080fd5b505af19250505080156141be575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526141bb91810190614f34565b60015b614288573d8080156141ec576040519150601f19603f3d011682016040523d82523d6000602084013e6141f1565b606091505b508051614280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109fe565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611b37565b506001949350505050565b8280546142ea90614b45565b90600052602060002090601f01602090048101928261430c5760008555614352565b82601f1061432557805160ff1916838001178555614352565b82800160010185558215614352579182015b82811115614352578251825591602001919060010190614337565b5061435e929150614362565b5090565b5b8082111561435e5760008155600101614363565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146113f657600080fd5b6000602082840312156143b757600080fd5b813561242281614377565b60005b838110156143dd5781810151838201526020016143c5565b838111156121bf5750506000910152565b600081518084526144068160208601602086016143c2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061242260208301846143ee565b60006020828403121561445d57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146113f657600080fd5b803561449181614464565b919050565b600080604083850312156144a957600080fd5b82356144b481614464565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715614514576145146144c2565b60405290565b60405160a0810167ffffffffffffffff81118282101715614514576145146144c2565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614584576145846144c2565b604052919050565b600067ffffffffffffffff8311156145a6576145a66144c2565b6145d760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160161453d565b90508281528383830111156145eb57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261461357600080fd5b6124228383356020850161458c565b67ffffffffffffffff811681146113f657600080fd5b803561449181614622565b61ffff811681146113f657600080fd5b803561449181614643565b600067ffffffffffffffff821115614678576146786144c2565b5060051b60200190565b600082601f83011261469357600080fd5b813560206146a86146a38361465e565b61453d565b82815260069290921b840181019181810190868411156146c757600080fd5b8286015b8481101561471857604081890312156146e45760008081fd5b6146ec6144f1565b81356146f781614464565b81528185013561470681614643565b818601528352918301916040016146cb565b509695505050505050565b600080600080600080600060e0888a03121561473e57600080fd5b873561474981614464565b9650602088013567ffffffffffffffff8082111561476657600080fd5b9089019060a0828c03121561477a57600080fd5b61478261451a565b82358281111561479157600080fd5b61479d8d828601614602565b8252506020830135828111156147b257600080fd5b6147be8d828601614602565b6020830152506040830135828111156147d657600080fd5b6147e28d828601614602565b6040830152506060830135606082015260808301358281111561480457600080fd5b6148108d828601614602565b608083015250975061482460408b01614638565b965060608a0135955061483960808b01614653565b945060a08a013591508082111561484f57600080fd5b5061485c8a828b01614682565b92505061486b60c08901614486565b905092959891949750929550565b60008060006060848603121561488e57600080fd5b833561489981614464565b925060208401356148a981614464565b929592945050506040919091013590565b600080604083850312156148cd57600080fd5b50508035926020909101359150565b6000602082840312156148ee57600080fd5b813561242281614464565b60608152600061490c60608301866143ee565b846020840152828103604084015261492481856143ee565b9695505050505050565b8035801515811461449157600080fd5b60006020828403121561495057600080fd5b6124228261492e565b6000806040838503121561496c57600080fd5b823561497781614464565b91506149856020840161492e565b90509250929050565b600080600080608085870312156149a457600080fd5b84356149af81614464565b935060208501356149bf81614464565b925060408501359150606085013567ffffffffffffffff8111156149e257600080fd5b8501601f810187136149f357600080fd5b614a028782356020840161458c565b91505092959194509250565b60006020808385031215614a2157600080fd5b823567ffffffffffffffff811115614a3857600080fd5b8301601f81018513614a4957600080fd5b8035614a576146a38261465e565b81815260059190911b82018301908381019087831115614a7657600080fd5b928401925b82841015614a9d578335614a8e81614464565b82529284019290840190614a7b565b979650505050505050565b60008060408385031215614abb57600080fd5b8235614ac681614464565b91506020830135614ad681614464565b809150509250929050565b60008060408385031215614af457600080fd5b823567ffffffffffffffff80821115614b0c57600080fd5b614b1886838701614602565b93506020850135915080821115614b2e57600080fd5b50614b3b85828601614602565b9150509250929050565b600181811c90821680614b5957607f821691505b60208210811415614b93577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015614c0957614c09614bc8565b500390565b600061ffff808316818516808303821115614c2b57614c2b614bc8565b01949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c6657614c66614bc8565b5060010190565b600061ffff83811690831681811015614c8857614c88614bc8565b039392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614cc857614cc8614bc8565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614d0b57614d0b614ccd565b500490565b600067ffffffffffffffff808316818516808303821115614c2b57614c2b614bc8565b600060208284031215614d4557600080fd5b815161242281614622565b600060208284031215614d6257600080fd5b5051919050565b600060208284031215614d7b57600080fd5b815161242281614464565b600060208284031215614d9857600080fd5b815161242281614643565b60008151614db58185602086016143c2565b9290920192915050565b600080845481600182811c915080831680614ddb57607f831692505b6020808410821415614e14577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b818015614e285760018114614e5757614e84565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650614e84565b60008b81526020902060005b86811015614e7c5781548b820152908501908301614e63565b505084890196505b505050505050614ec0614eba827f3f746f6b656e49643d0000000000000000000000000000000000000000000000815260090190565b85614da3565b95945050505050565b60008219821115614edc57614edc614bc8565b500190565b600082614ef057614ef0614ccd565b500690565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152508360408301526080606083015261492460808301846143ee565b600060208284031215614f4657600080fd5b81516124228161437756fea2646970667358221220d073d01b8710e2ae7dff3b958ca47cb6a6bc2b2b46274aedbf10f914b43a993064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "tokenId": "token edition identifier to burn"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getURI()": {
        "returns": {
          "_0": "contentUrl, contentHash"
        }
      },
      "initialize(address,(string,string,string,bytes32,string),uint64,uint256,uint16,(address,uint16)[],address)": {
        "params": {
          "_allowancesRef": "contract address storing array of tuples listing the allowed minters and their allowances",
          "_info": "token properties",
          "_owner": "can authorize, mint, gets royalties and a dividend of sales, can update the content URL.",
          "_price": "sale price in wei",
          "_royalties": "perpetual royalties paid to the creator upon token selling",
          "_shares": "array of tuples listing the shareholders and their respective shares in bps (one per each shareholder)",
          "_size": "number of NFTs that can be minted from this contract: set to 0 for unbound"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintAndTransfer(address[])": {
        "params": {
          "recipients": "list of addresses to send the newly minted tokens to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_value": "the sale price for this token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setPrice(uint256)": {
        "params": {
          "_wei": "if sale price is 0, no sale is allowed, otherwise the provided amount of WEI is needed to start the sale."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "User burn function for token id. "
      },
      "getURI()": {
        "notice": "Get URIs and hash for edition NFT"
      },
      "initialize(address,(string,string,string,bytes32,string),uint64,uint256,uint16,(address,uint16)[],address)": {
        "notice": "Creates a new edition and sets the only allowed minter to the address that creates/owns the edition: this can be re-assigned or updated later. "
      },
      "mint()": {
        "notice": "If caller is listed as an allowed minter, mints one NFT for him."
      },
      "mintAndTransfer(address[])": {
        "notice": "Mints multiple tokens, one for each of the given list of addresses. Only the edition owner can use this operation and it is intended fo partial giveaways. "
      },
      "mintable()": {
        "notice": "Returns the number of tokens still available for minting (uint64 when open edition)"
      },
      "owner()": {
        "notice": "Returns the owner of the collection of editions."
      },
      "purchase()": {
        "notice": "Basic ETH-based sales operation, performed at the given set price. This operation is open to everyone as soon as the salePrice is set to a non-zero value."
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "ERC2981 - Gets royalty information for token"
      },
      "setPrice(uint256)": {
        "notice": "This operation sets the sale price, thus allowing anyone to acquire a token from this edition at the sale price via the purchase operation. Setting the sale price to 0 prevents purchase of the tokens which is then allowed only to permitted addresses. "
      },
      "shake()": {
        "notice": "Transfers all ETHs from the contract balance to the owner and shareholders."
      },
      "tokenURI(uint256)": {
        "notice": "Get URI for given token id "
      },
      "totalSupply()": {
        "notice": "Returns the number of tokens minted so far "
      },
      "updateEditionsURLs(string,string)": {
        "notice": "Allows for updates of edition urls by the owner of the edition. Only URLs can be updated (data-uris are supported), hashes cannot be updated."
      },
      "withdraw()": {
        "notice": "Transfers `withdrawable(msg.sender)` to the caller."
      },
      "withdrawable(address)": {
        "notice": "Returns how much the account can withdraw from this contract."
      }
    },
    "notice": "This contract allows dynamic NFT minting.  Operations allow for selling publicly, partial or total giveaways, direct giveaways and rewardings.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 563,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 566,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1913,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2236,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 632,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 634,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 638,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 642,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 646,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 652,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1463,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 534,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4319,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "counter",
        "offset": 0,
        "slot": "201",
        "type": "t_struct(Counter)1920_storage"
      },
      {
        "astId": 4321,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "contentUrl",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 4323,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "contentHash",
        "offset": 0,
        "slot": "203",
        "type": "t_bytes32"
      },
      {
        "astId": 4325,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "metadataUrl",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 4327,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "size",
        "offset": 0,
        "slot": "205",
        "type": "t_uint64"
      },
      {
        "astId": 4329,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "royalties",
        "offset": 8,
        "slot": "205",
        "type": "t_uint16"
      },
      {
        "astId": 4331,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "allowancesRef",
        "offset": 10,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 4335,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "allowedMinters",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 4337,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "price",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 4340,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "shareholders",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4344,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "shares",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 4346,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "withdrawn",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 4350,
        "contract": "contracts/MintableEditions.sol:MintableEditions",
        "label": "withdrawals",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1920_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1919,
            "contract": "contracts/MintableEditions.sol:MintableEditions",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}